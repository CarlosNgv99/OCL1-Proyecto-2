/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,7],$V2=[6,8],$V3=[1,23],$V4=[1,27],$V5=[8,14],$V6=[1,31],$V7=[1,32],$V8=[1,33],$V9=[1,34],$Va=[1,35],$Vb=[1,36],$Vc=[1,52],$Vd=[1,54],$Ve=[1,74],$Vf=[1,82],$Vg=[1,81],$Vh=[1,79],$Vi=[1,80],$Vj=[1,78],$Vk=[1,77],$Vl=[1,75],$Vm=[1,76],$Vn=[20,29],$Vo=[8,10,14,43,44,45,46,47,48,53,59,61,62,63,64,69,70,71],$Vp=[10,14,43,44,45,46,47,48,53,59,62,63,64,69,70,71],$Vq=[1,101],$Vr=[1,100],$Vs=[1,93],$Vt=[1,94],$Vu=[1,95],$Vv=[1,96],$Vw=[1,97],$Vx=[1,98],$Vy=[1,99],$Vz=[1,104],$VA=[1,113],$VB=[1,112],$VC=[1,114],$VD=[1,115],$VE=[1,116],$VF=[1,117],$VG=[1,118],$VH=[1,119],$VI=[1,120],$VJ=[1,121],$VK=[1,122],$VL=[1,123],$VM=[1,124],$VN=[20,28,72,74,75,76,77,78,79,80,81,82,83,84,85],$VO=[28,29,51],$VP=[20,28,72,74,75,76,77,78,79,80,81,82,83,84],$VQ=[20,28,72,74,77,78,79,80,81,82,83,84],$VR=[20,28,77,78,79,80,81,82,83,84],$VS=[20,28,81,82,83,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_clases":4,"lista_interfaces":5,"EOF":6,"sentencia_clase":7,"RESERVADA_PUBLIC":8,"RESERVADA_CLASS":9,"ID":10,"bloque_declaracion_metodos_funciones":11,"LLAVEIZQ":12,"lista_declaracion_metodos_funciones":13,"LLAVEDER":14,"declaracion_metodos_funciones":15,"tipo":16,"PARENTIZQ":17,"declaracion_parametros_mf":18,"lista_parametros":19,"PARENTDER":20,"instrucciones_llaves":21,"sentencia_interfaz":22,"RESERVADA_INTERFACE":23,"bloque_declaracion_funcion":24,"lista_declaracion_funciones":25,"declaracion_funcion":26,"declaracion_parametros_funcion":27,"PUNTO_COMA":28,"COMA":29,"instruccion":30,"asignacion_simple":31,"sentencia_break":32,"sentencia_continue":33,"sentencia_return_metodos":34,"sentencia_for":35,"sentencia_while":36,"sentencia_do_while":37,"sentencia_if":38,"sentencia_return_funciones":39,"sentencia_print":40,"declaracion_variable":41,"lista_instrucciones":42,"RESERVADA_BOOLEAN":43,"RESERVADA_INT":44,"RESERVADA_CHAR":45,"RESERVADA_DOUBLE":46,"RESERVADA_STRING":47,"RESERVADA_VOID":48,"lista_id":49,"asignacion":50,"ASIGNACION":51,"expresion":52,"RESERVADA_SYSTEM":53,"PUNTO":54,"opcion_print":55,"RESERVADA_OUT":56,"RESERVADA_PRINTLN":57,"RESERVADA_PRINT":58,"RESERVADA_IF":59,"condicion":60,"RESERVADA_ELSE":61,"RESERVADA_WHILE":62,"RESERVADA_DO":63,"RESERVADA_FOR":64,"declaracion_for":65,"incremento_decremento":66,"INCR":67,"DECR":68,"RESERVADA_RETURN":69,"RESERVADA_BREAK":70,"RESERVADA_CONTINUE":71,"MENOS":72,"NEG":73,"MAS":74,"MULT":75,"DIVISION":76,"MAYOR_IGUAL":77,"MENOR_IGUAL":78,"MAYOR":79,"MENOR":80,"IGUALDAD":81,"DESIGUALDAD":82,"AND":83,"OR":84,"XOR":85,"NUMBER":86,"DECIMAL":87,"RESERVADA_TRUE":88,"RESERVADA_FALSE":89,"STRING":90,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"RESERVADA_PUBLIC",9:"RESERVADA_CLASS",10:"ID",12:"LLAVEIZQ",14:"LLAVEDER",17:"PARENTIZQ",20:"PARENTDER",23:"RESERVADA_INTERFACE",28:"PUNTO_COMA",29:"COMA",43:"RESERVADA_BOOLEAN",44:"RESERVADA_INT",45:"RESERVADA_CHAR",46:"RESERVADA_DOUBLE",47:"RESERVADA_STRING",48:"RESERVADA_VOID",51:"ASIGNACION",53:"RESERVADA_SYSTEM",54:"PUNTO",56:"RESERVADA_OUT",57:"RESERVADA_PRINTLN",58:"RESERVADA_PRINT",59:"RESERVADA_IF",61:"RESERVADA_ELSE",62:"RESERVADA_WHILE",63:"RESERVADA_DO",64:"RESERVADA_FOR",67:"INCR",68:"DECR",69:"RESERVADA_RETURN",70:"RESERVADA_BREAK",71:"RESERVADA_CONTINUE",72:"MENOS",73:"NEG",74:"MAS",75:"MULT",76:"DIVISION",77:"MAYOR_IGUAL",78:"MENOR_IGUAL",79:"MAYOR",80:"MENOR",81:"IGUALDAD",82:"DESIGUALDAD",83:"AND",84:"OR",85:"XOR",86:"NUMBER",87:"DECIMAL",88:"RESERVADA_TRUE",89:"RESERVADA_FALSE",90:"STRING"},
productions_: [0,[3,2],[3,2],[3,1],[4,2],[4,1],[7,4],[11,3],[11,2],[13,2],[13,1],[15,5],[18,3],[18,2],[5,2],[5,1],[22,4],[24,3],[24,2],[25,2],[25,1],[26,5],[27,3],[27,2],[19,4],[19,2],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[42,2],[42,1],[21,3],[21,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[41,3],[49,3],[49,1],[50,3],[50,1],[40,8],[55,1],[55,1],[38,3],[38,5],[38,5],[36,3],[37,5],[35,9],[65,4],[65,3],[66,2],[66,2],[34,2],[39,3],[32,2],[33,2],[31,4],[60,3],[52,2],[52,2],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,1],[52,1],[52,1],[52,1],[52,1],[52,3],[52,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1];
break;
case 2: case 4: case 8: case 9: case 13: case 14: case 18: case 19: case 23: case 25: case 37: case 40: case 65: case 67: case 68: case 91:
 this.$ = $$[$0-1];
break;
case 5: case 10: case 15: case 20: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 38: case 41: case 42: case 43: case 44: case 45: case 71: case 72: case 88: case 89: case 90: case 92:
 this.$ = $$[$0];
break;
case 6: case 16: case 24: case 69:
 this.$ = $$[$0-3];
break;
case 7: case 12: case 17: case 22: case 39: case 66: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85:
 this.$ = $$[$0-2];
break;
case 11: case 21:
 this.$ = $$[$0-4];
break;
case 46:
 this.$ = $$[$0]; 
break;
case 86: case 87:
 this.$ = ($$[$0]);
break;
}
},
table: [{3:1,4:2,5:3,6:$V0,7:5,8:$V1,22:6},{1:[3]},{3:8,4:2,5:3,6:$V0,7:9,8:$V1,22:6},{3:10,4:2,5:3,6:$V0,7:5,8:$V1,22:11},{1:[2,3]},o($V2,[2,5]),o($V2,[2,15]),{9:[1,12],23:[1,13]},{1:[2,1]},o($V2,[2,4]),{1:[2,2]},o($V2,[2,14]),{10:[1,14]},{10:[1,15]},{11:16,12:[1,17]},{12:[1,19],24:18},o($V2,[2,6]),{8:$V3,13:20,14:[1,21],15:22},o($V2,[2,16]),{8:$V4,14:[1,25],25:24,26:26},{8:$V3,14:[1,28],15:29},o($V2,[2,8]),o($V5,[2,10]),{16:30,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{8:$V4,14:[1,37],26:38},o($V2,[2,18]),o($V5,[2,20]),{16:39,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($V2,[2,7]),o($V5,[2,9]),{10:[1,40]},{10:[2,41]},{10:[2,42]},{10:[2,43]},{10:[2,44]},{10:[2,45]},{10:[2,46]},o($V2,[2,17]),o($V5,[2,19]),{10:[1,41]},{17:[1,42]},{17:[1,43]},{16:47,18:44,19:45,20:[1,46],43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{16:47,19:49,20:[1,50],27:48,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($V5,[2,11]),{20:[1,51],29:$Vc},{12:$Vd,21:53},{10:[1,55]},o($V5,[2,21]),{20:[1,56],29:$Vc},{28:[1,57]},{12:$Vd,21:58},{16:59,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($V5,[2,13]),{10:$Ve,14:[1,61],16:83,30:62,31:63,32:64,33:65,34:66,35:67,36:68,37:69,38:70,39:71,40:72,41:73,42:60,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,53:$Vf,59:$Vg,62:$Vh,63:$Vi,64:$Vj,69:$Vk,70:$Vl,71:$Vm},o($Vn,[2,25]),{28:[1,84]},o($V5,[2,23]),o($V5,[2,12]),{10:[1,85]},{10:$Ve,14:[1,86],16:83,30:87,31:63,32:64,33:65,34:66,35:67,36:68,37:69,38:70,39:71,40:72,41:73,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,53:$Vf,59:$Vg,62:$Vh,63:$Vi,64:$Vj,69:$Vk,70:$Vl,71:$Vm},o($Vo,[2,40]),o($Vp,[2,38]),o($Vp,[2,26]),o($Vp,[2,27]),o($Vp,[2,28]),o($Vp,[2,29]),o($Vp,[2,30]),o($Vp,[2,31]),o($Vp,[2,32]),o($Vp,[2,33]),o($Vp,[2,34]),o($Vp,[2,35]),o($Vp,[2,36]),{51:[1,88]},{28:[1,89]},{28:[1,90]},{10:$Vq,17:$Vr,28:[1,91],52:92,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{17:[1,102]},{17:$Vz,60:103},{12:$Vd,21:105},{17:$Vz,60:106},{54:[1,107]},{10:[1,109],49:108},o($V5,[2,22]),o($Vn,[2,24]),o($Vo,[2,39]),o($Vp,[2,37]),{10:$Vq,17:$Vr,52:110,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},o($Vp,[2,67]),o($Vp,[2,68]),o($Vp,[2,65]),{28:[1,111],72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{10:$Vq,17:$Vr,52:125,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{10:$Vq,17:$Vr,52:126,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},o($VN,[2,86]),o($VN,[2,87]),o($VN,[2,88]),o($VN,[2,89]),o($VN,[2,90]),{10:$Vq,17:$Vr,52:127,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},o($VN,[2,92]),{10:[1,130],16:129,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,65:128},{12:$Vd,21:131},{10:$Vq,17:$Vr,52:132,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{62:[1,133]},{12:$Vd,21:134},{55:135,57:[1,136],58:[1,137]},{28:[1,141],29:[1,139],50:138,51:[1,140]},o($VO,[2,49]),{28:[1,142],72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},o($Vp,[2,66]),{10:$Vq,17:$Vr,52:143,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{10:$Vq,17:$Vr,52:144,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{10:$Vq,17:$Vr,52:145,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{10:$Vq,17:$Vr,52:146,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{10:$Vq,17:$Vr,52:147,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{10:$Vq,17:$Vr,52:148,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{10:$Vq,17:$Vr,52:149,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{10:$Vq,17:$Vr,52:150,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{10:$Vq,17:$Vr,52:151,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{10:$Vq,17:$Vr,52:152,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{10:$Vq,17:$Vr,52:153,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{10:$Vq,17:$Vr,52:154,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{10:$Vq,17:$Vr,52:155,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},o($VP,[2,71],{85:$VM}),o($VP,[2,72],{85:$VM}),{20:[1,156],72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{28:[1,157]},{10:[1,158]},{51:[1,159]},o($Vp,[2,58]),{20:[1,160],72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{17:$Vz,60:161},o($Vp,[2,55],{61:[1,162]}),{54:[1,163]},{54:[2,53]},{54:[2,54]},o($Vp,[2,47]),{10:[1,164]},{10:$Vq,17:$Vr,52:165,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},o($Vp,[2,51]),o($Vp,[2,69]),o($VQ,[2,73],{75:$VC,76:$VD,85:$VM}),o($VQ,[2,74],{75:$VC,76:$VD,85:$VM}),o($VP,[2,75],{85:$VM}),o($VP,[2,76],{85:$VM}),o($VR,[2,77],{72:$VA,74:$VB,75:$VC,76:$VD,85:$VM}),o($VR,[2,78],{72:$VA,74:$VB,75:$VC,76:$VD,85:$VM}),o($VR,[2,79],{72:$VA,74:$VB,75:$VC,76:$VD,85:$VM}),o($VR,[2,80],{72:$VA,74:$VB,75:$VC,76:$VD,85:$VM}),o($VS,[2,81],{72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,85:$VM}),o($VS,[2,82],{72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,85:$VM}),o([20,28,83,84],[2,83],{72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,85:$VM}),o([20,28,84],[2,84],{72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,85:$VM}),o([20,28],[2,85],{72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM}),o($VN,[2,91]),{10:$Vq,17:$Vr,52:166,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{51:[1,167]},{10:$Vq,17:$Vr,52:168,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},o([12,28],[2,70]),{28:[1,169]},{12:$Vd,21:171,38:170,59:$Vg},{56:[1,172]},o($VO,[2,48]),{28:[1,173],72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{28:[1,174],72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{10:$Vq,17:$Vr,52:175,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{28:[2,62],72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},o($Vp,[2,59]),o($Vp,[2,56]),o($Vp,[2,57]),{17:[1,176]},o($Vp,[2,50]),{10:[1,178],66:177},{28:[2,61],72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{10:$Vq,17:$Vr,52:179,72:$Vs,73:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy},{20:[1,180]},{67:[1,181],68:[1,182]},{20:[1,183],72:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM},{12:$Vd,21:184},{20:[2,63]},{20:[2,64]},o($Vp,[2,52]),o($Vp,[2,60])],
defaultActions: {4:[2,3],8:[2,1],10:[2,2],31:[2,41],32:[2,42],33:[2,43],34:[2,44],35:[2,45],36:[2,46],136:[2,53],137:[2,54],181:[2,63],182:[2,64]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:  
break;
case 2:
break;
case 3: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 90; 
break;
case 4:return 87;
break;
case 5:return 'ENTERO';
break;
case 6:return 'DOS_PUNTOS';
break;
case 7:return 28;
break;
case 8:return 29
break;
case 9:return 67;           
break;
case 10:return 74;
break;
case 11:return 68;   
break;
case 12:return 72;
break;
case 13:return 76;
break;
case 14:return 75;
break;
case 15:return 54;
break;
case 16:return 80;           
break;
case 17:return 79;           
break;
case 18:return 78;           
break;
case 19:return 77; 
break;
case 20:return 81;           
break;
case 21:return 82;           
break;
case 22:return 84;           
break;
case 23:return 83;           
break;
case 24:return 85;     
break;
case 25:return 73;           
break;
case 26:return 51;
break;
case 27:return 17;
break;
case 28:return 20;
break;
case 29:return 'BRACKIZQ';
break;
case 30:return 'BRACKDER';
break;
case 31:return 12;
break;
case 32:return 14;
break;
case 33:return 8;
break;
case 34:return 9;
break;
case 35:return 23;
break;
case 36:return 44;
break;
case 37:return 46;
break;
case 38:return 43;
break;
case 39:return 48;   
break;
case 40:return 45;           
break;
case 41:return 47;           
break;
case 42:return 59;           
break;
case 43:return 61;           
break;
case 44:return 64;           
break;
case 45:return 62;           
break;
case 46:return 63;           
break;
case 47:return 88;   
break;
case 48:return 89;     
break;
case 49:return 'RESERVADA_STATIC';           
break;
case 50:return 'RESERVADA_MAIN';           
break;
case 51:return 71;          
break;
case 52:return 70;           
break;
case 53:return 53; 
break;
case 54:return 56;           
break;
case 55:return 57; 
break;
case 56:return 58;          
break;
case 57:return 69;  
break;
case 58:return 10;
break;
case 59:return 6;
break;
case 60: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:\n)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:\/\/.*[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]:)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:return\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}