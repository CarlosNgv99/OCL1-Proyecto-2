/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,4],$V2=[1,8],$V3=[2,5,8],$V4=[1,15],$V5=[1,28],$V6=[1,32],$V7=[2,8,14],$V8=[1,37],$V9=[1,38],$Va=[1,39],$Vb=[1,40],$Vc=[1,41],$Vd=[1,42],$Ve=[8,14],$Vf=[1,58],$Vg=[1,60],$Vh=[1,82],$Vi=[1,90],$Vj=[1,89],$Vk=[1,87],$Vl=[1,88],$Vm=[1,86],$Vn=[1,85],$Vo=[1,83],$Vp=[1,84],$Vq=[20,29],$Vr=[2,8,10,14,44,45,46,47,48,49,54,60,62,63,64,65,69,70,71],$Vs=[10,14,44,45,46,47,48,49,54,60,63,64,65,69,70,71],$Vt=[1,97],$Vu=[1,98],$Vv=[1,111],$Vw=[1,110],$Vx=[1,103],$Vy=[1,104],$Vz=[1,105],$VA=[1,106],$VB=[1,107],$VC=[1,108],$VD=[1,109],$VE=[1,112],$VF=[1,115],$VG=[10,14,20,44,45,46,47,48,49,54,60,63,64,65,69,70,71],$VH=[1,126],$VI=[1,125],$VJ=[1,127],$VK=[1,128],$VL=[1,129],$VM=[1,130],$VN=[1,131],$VO=[1,132],$VP=[1,133],$VQ=[1,134],$VR=[1,135],$VS=[1,136],$VT=[1,137],$VU=[20,28,72,74,75,76,77,78,79,80,81,82,83,84,85],$VV=[28,29,52],$VW=[20,28,72,74,75,76,77,78,79,80,81,82,83,84],$VX=[20,28,72,74,77,78,79,80,81,82,83,84],$VY=[20,28,77,78,79,80,81,82,83,84],$VZ=[20,28,81,82,83,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_clases":4,"EOF":5,"lista_interfaces":6,"sentencia_clase":7,"RESERVADA_PUBLIC":8,"RESERVADA_CLASS":9,"ID":10,"bloque_declaracion_metodos_funciones":11,"LLAVEIZQ":12,"lista_declaracion_metodos_funciones":13,"LLAVEDER":14,"declaracion_metodos_funciones":15,"tipo":16,"PARENTIZQ":17,"declaracion_parametros_mf":18,"lista_parametros":19,"PARENTDER":20,"instrucciones_llaves":21,"sentencia_interfaz":22,"RESERVADA_INTERFACE":23,"bloque_declaracion_funcion":24,"lista_declaracion_funciones":25,"declaracion_funcion":26,"declaracion_parametros_funcion":27,"PUNTO_COMA":28,"COMA":29,"instruccion":30,"asignacion_simple":31,"sentencia_break":32,"sentencia_continue":33,"sentencia_return_metodos":34,"sentencia_for":35,"sentencia_while":36,"sentencia_do_while":37,"sentencia_if":38,"sentencia_return_funciones":39,"sentencia_print":40,"declaracion_variable":41,"incremento_decremento":42,"lista_instrucciones":43,"RESERVADA_BOOLEAN":44,"RESERVADA_INT":45,"RESERVADA_CHAR":46,"RESERVADA_DOUBLE":47,"RESERVADA_STRING":48,"RESERVADA_VOID":49,"lista_id":50,"asignacion":51,"ASIGNACION":52,"expresion":53,"RESERVADA_SYSTEM":54,"PUNTO":55,"RESERVADA_OUT":56,"opcion_print":57,"RESERVADA_PRINTLN":58,"RESERVADA_PRINT":59,"RESERVADA_IF":60,"condicion":61,"RESERVADA_ELSE":62,"RESERVADA_WHILE":63,"RESERVADA_DO":64,"RESERVADA_FOR":65,"declaracion_for":66,"INCR":67,"DECR":68,"RESERVADA_RETURN":69,"RESERVADA_BREAK":70,"RESERVADA_CONTINUE":71,"MENOS":72,"NEG":73,"MAS":74,"MULT":75,"DIVISION":76,"MAYOR_IGUAL":77,"MENOR_IGUAL":78,"MAYOR":79,"MENOR":80,"IGUALDAD":81,"DESIGUALDAD":82,"AND":83,"OR":84,"XOR":85,"ENTERO":86,"DECIMAL":87,"RESERVADA_TRUE":88,"RESERVADA_FALSE":89,"STRING":90,"RESERVADA_NULL":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RESERVADA_PUBLIC",9:"RESERVADA_CLASS",10:"ID",12:"LLAVEIZQ",14:"LLAVEDER",17:"PARENTIZQ",20:"PARENTDER",23:"RESERVADA_INTERFACE",28:"PUNTO_COMA",29:"COMA",44:"RESERVADA_BOOLEAN",45:"RESERVADA_INT",46:"RESERVADA_CHAR",47:"RESERVADA_DOUBLE",48:"RESERVADA_STRING",49:"RESERVADA_VOID",52:"ASIGNACION",54:"RESERVADA_SYSTEM",55:"PUNTO",56:"RESERVADA_OUT",58:"RESERVADA_PRINTLN",59:"RESERVADA_PRINT",60:"RESERVADA_IF",62:"RESERVADA_ELSE",63:"RESERVADA_WHILE",64:"RESERVADA_DO",65:"RESERVADA_FOR",67:"INCR",68:"DECR",69:"RESERVADA_RETURN",70:"RESERVADA_BREAK",71:"RESERVADA_CONTINUE",72:"MENOS",73:"NEG",74:"MAS",75:"MULT",76:"DIVISION",77:"MAYOR_IGUAL",78:"MENOR_IGUAL",79:"MAYOR",80:"MENOR",81:"IGUALDAD",82:"DESIGUALDAD",83:"AND",84:"OR",85:"XOR",86:"ENTERO",87:"DECIMAL",88:"RESERVADA_TRUE",89:"RESERVADA_FALSE",90:"STRING",91:"RESERVADA_NULL"},
productions_: [0,[3,2],[3,2],[3,1],[4,2],[4,1],[4,1],[7,4],[7,1],[11,3],[11,2],[11,1],[13,2],[13,1],[13,1],[15,5],[15,1],[18,3],[18,2],[6,2],[6,1],[22,4],[24,3],[24,2],[25,2],[25,1],[26,5],[27,3],[27,2],[19,4],[19,2],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[43,2],[43,1],[43,1],[21,3],[21,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[41,3],[50,3],[50,1],[51,3],[51,1],[40,9],[57,1],[57,1],[57,1],[38,3],[38,5],[38,5],[36,3],[37,5],[35,9],[66,4],[66,3],[42,2],[42,2],[42,3],[42,3],[34,2],[39,3],[32,2],[33,2],[31,4],[61,3],[53,2],[53,2],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,1],[53,1],[53,1],[53,1],[53,1],[53,3],[53,1],[53,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    this.$ = new Node('INICIO', '');
    this.$.setChild($$[$0-1]);
    this.$.nodeList = nodeList;
    this.$.traduction = $$[$0-1].traduction;
    this.traduction = this.$.traduction;
    this.$.errorList = errorList;
    return this.$;

break;
case 2:
 
            this.$ = new Node('INICIO', '');
            this.$.setChild($$[$0-1]);
            this.$.nodeList = nodeList;
            this.$.traduction = $$[$0-1].traduction;
            this.traduction = this.$.traduction;
            this.$.errorList = errorList;
            return this.$;
      
break;
case 3:
  
break;
case 4:
 
    this.$ = new Node('LISTA_CLASES','');
    this.$.setChild($$[$0-1]);
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-1].traduction + ' ' + $$[$0].traduction;

break;
case 5:
 
                this.$ = new Node('LISTA_CLASES','');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction
            
break;
case 6: case 14: case 45:

                        newError = new Error(yytext, this._$.first_line, this._$.first_column);
                        errorList.push(newError);
                        console.log("4.Error sintáctico en línea: " + this._$.first_line + " y columna: " + this._$.first_column); 
                    
break;
case 7:
 
    this.$ = new Node('SENTENCIA_CLASE', ' ');
    this.$.setChild(new Node($$[$0-3], 'PUBLIC'));
    this.$.setChild(new Node($$[$0-2], 'CLASS'));
    this.$.setChild(new Node($$[$0-1], 'ID'));
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0].traduction; // class hola
 
break;
case 8:

                     console.log("1. Error sintáctico en línea: " + this._$.first_line + " y columna: " + this._$.first_column); 
                     newError = new Error(yytext, this._$.first_line, this._$.first_column);
                     errorList.push(newError);
                
break;
case 9:
 
    this.$ = new Node('BLOQUE_DECLARACION_MF', ' ');
    this.$.setChild(new Node($$[$0-2], 'LLAVEIZQ'));
    if($$[$0-1].childList.length > 0) {
        this.$.setChild($$[$0-1]);
    }
    this.$.setChild(new Node($$[$0], 'LLAVEDER'));
    this.$.traduction = $$[$0-2] + '\n' + $$[$0-1].traduction + '\n' +$$[$0] + '\n' // { instrucciones }

break;
case 10:
 
                                 this.$ = new Node('BLOQUE_DECLARACION_MF', ' ');
                                 this.$.setChild(new Node($$[$0-1], 'LLAVEIZQ'));
                                 this.$.setChild(new Node($$[$0], 'LLAVEDER'));
                                 this.$.traduction = $$[$0-1] + $$[$0];
                             
break;
case 11:

                                console.log("2. Error sintáctico en línea: " + this._$.first_line + " y columna: " + this._$.first_column); 
                                newError = new Error(yytext, this._$.first_line, this._$.first_column);
                                errorList.push(newError);
                             
break;
case 12:
 
    this.$ = new Node('LISTA_DECLARACION_MF', '');
    this.$.setChild($$[$0-1]);
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-1].traduction + ' ' + $$[$0].traduction;

break;
case 13:
 
                                        this.$ = new Node('LISTA_DECLARACION_MF', '');
                                        this.$.setChild($$[$0]);
                                        this.$.traduction = $$[$0].traduction;
                                    
break;
case 15:
 
    this.$ = new Node('DECLARACION_MF', '');
    this.$.setChild(new Node($$[$0-4], 'PUBLIC'));
    this.$.setChild($$[$0-3]);
    this.$.setChild(new Node($$[$0-2], 'ID'));
    this.$.setChild(new Node($$[$0-1], 'PARENTIZQ'));
    this.$.setChild($$[$0]);
    this.$.traduction = 'function ' + $$[$0-2] + $$[$0-1] + $$[$0].traduction;

break;
case 16:

                                newError = new Error(yytext, this._$.first_line, this._$.first_column);
                                errorList.push(newError);
                                console.log("3.Error sintáctico en línea: " + this._$.first_line + " y columna: " + this._$.first_column); 
                             
break;
case 17:
 
    this.$ = new Node('DECLARACION_PARAMETROS_MF', '');
    this.$.setChild($$[$0-2]);
    this.$.setChild(new Node($$[$0], 'PARENTDER'));
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-2].traduction + $$[$0-1] + ' ' + $$[$0].traduction;

break;
case 18:
 
                                this.$ = new Node('DECLARACION_PARAMETROS_MF', '');
                                this.$.setChild(new Node($$[$0-1], 'PARENTDER'));
                                this.$.setChild($$[$0]);
                                this.$.traduction = $$[$0-1] + ' ' + $$[$0].traduction;
                         
break;
case 19:
 
    this.$ = new Node('LISTA_INTERFACES', '');
    this.$.setChild($$[$0-1]);
    this.$.setChild($$[$0]);

break;
case 20:
 
                    this.$ = new Node('LISTA_INTERFACES', '');
                    this.$.setChild($$[$0]);
                
break;
case 21:
 
    this.$ = new Node('SENTENCIA_INTERFAZ', '');
    this.$.setChild(new Node($$[$0-3],'PUBLIC'));
    this.$.setChild(new Node($$[$0-2],'INTERFACE'));
    this.$.setChild(new Node($$[$0-1],'ID'));
    this.$.setChild(new Node($$[$0]));

break;
case 22:
 
    this.$ = new Node('BLOQUE_DECLARACION_FUNC', '');
    this.$.setChild(new Node($$[$0-2],'LLAVEIZQ'));
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0],'LLAVEDER'));

break;
case 23:
 
                        this.$ = new Node('BLOQUE_DECLARACION_FUNC', '');
                        this.$.setChild(new Node($$[$0-1],'LLAVEIZQ'));
                        this.$.setChild(new Node($$[$01],'LLAVEDER'));
                     
break;
case 24:
 
    this.$ = new Node('LISTA_DECLARACION_FUNC', '');
    this.$.setChild($$[$0-1]);
    this.$.setChild($$[$0]);

break;
case 25:
 
                                this.$ = new Node('LISTA_DECLARACION_FUNC', '');
                                this.$.setChild($$[$0]);
                           
break;
case 26:
 
    this.$ = new Node('DECLARACION_FUNC', '');
    this.$.setChild(new Node($$[$0-4],'PUBLIC'));
    this.$.setChild($$[$0-3]);
    this.$.setChild(new Node($$[$0-2],'ID'));
    this.$.setChild(new Node($$[$0-1],'PARENTIZQ'));
    this.$.setChild($$[$0]);

break;
case 27:
 
    this.$ = new Node('DECLARACION_PARAMETROS_FUNC', '');
    this.$.setChild($$[$0-2]);
    this.$.setChild(new Node($$[$0-1],'PARENTDER'));
    this.$.setChild(new Node($$[$0],'PUNTO_COMA'));

break;
case 28:
 
                                this.$ = new Node('DECLARACION_PARAMETROS_FUNC', '');
                                this.$.setChild(new Node($$[$0-1],'PARENTDER'));
                                this.$.setChild(new Node($$[$0],'PUNTO_COMA'));  
                              
break;
case 29:
 
    this.$ = new Node('LISTA_PARAMETROS', '');
    this.$.setChild($$[$0-3]);
    this.$.setChild(new Node($$[$0-2], 'COMA'));
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'ID'));
    this.$.traduction = $$[$0-3].traduction + $$[$0-2] + $$[$0-1].traduction + $$[$0];
    
break;
case 30:
 
                    this.$ = new Node('LISTA_PARAMETROS', '');
                    this.$.setChild($$[$0-1]);
                    this.$.setChild(new Node($$[$0], 'ID'));
                    this.$.traduction = $$[$0-1].traduction + $$[$0];
                
break;
case 31:
 
                        this.$ = new Node('INSTRUCCION','');
                        this.$.setChild($$[$0]);
                        this.$.traduction = $$[$0].traduction;
                        
break;
case 32:
  
                this.$ = new Node('INSTRUCCION','');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction;
           
break;
case 33: case 34: case 35: case 36: case 37: case 38: case 39:
 
                this.$ = new Node('INSTRUCCION','');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction;
           
break;
case 40: case 41:

                this.$ = new Node('INSTRUCCION','');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction;
           
break;
case 42:
 
               this.$ = new Node('INSTRUCCION','');
               this.$.setChild($$[$0]);
               this.$.traduction = $$[$0].traduction;
           
break;
case 43:
 
    this.$ = new Node('LISTA_INSTRUCCIONES','');
    this.$.setChild($$[$0-1]);
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-1].traduction + ' '+ $$[$0].traduction;

break;
case 44:
 
                        this.$ = new Node('LISTA_INSTRUCCIONES','');
                        this.$.setChild($$[$0]);
                        this.$.traduction = $$[$0].traduction;
                   
break;
case 46:
 
    this.$ = new Node('INSTR_LLAVES', '');
    this.$.setChild(new Node($$[$0-2], 'LLAVEIZQ'));
    if($$[$0-1].childList.length > 0) {
        this.$.setChild($$[$0-1])
    }
    //this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'LLAVEDER'));
    this.$.traduction = $$[$0-2] + '\n' + $$[$0-1].traduction  +'\n' + $$[$0]; // { instrucciones }
    


break;
case 47:
 
                        this.$ = new Node('INSTR_LLAVES', '');
                        this.$.setChild(new Node($$[$0-1], 'LLAVEIZQ'));
                        this.$.setChild(new Node($$[$0], 'LLAVEDER'));
                        this.$.traduction = $$[$0-1] + $$[$0] + '\n';  // {}
                        
                    
break;
case 48:
 this.$ = new Node('TIPO',''); this.$.setChild(new Node('boolean','RESERVADA')); this.$.traduction = 'var ';
break;
case 49:
 this.$ = new Node('TIPO',''); this.$.setChild(new Node('int','RESERVADA')); this.$.traduction = 'var ';
break;
case 50:
 this.$ = new Node('TIPO',''); this.$.setChild(new Node('char','RESERVADA')); this.$.traduction = 'var ';
break;
case 51:
 this.$ = new Node('TIPO',''); this.$.setChild(new Node('double','RESERVADA')); this.$.traduction = 'var ';
break;
case 52:
 this.$ = new Node('TIPO',''); this.$.setChild(new Node('String','RESERVADA')); this.$.traduction = 'var ';
break;
case 53:
 this.$ = new Node('TIPO',''); this.$.setChild(new Node('void','RESERVADA')); this.$.traduction = '';
break;
case 54:

    this.$ = new Node('DECLARACION_VARIABLE', ''); 
    this.$.setChild($$[$0-2]);
    if($$[$0-1].childList.length > 0) {
        this.$.setChild($$[$0-1]);
    }
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-2].traduction + $$[$0-1].traduction + $$[$0].traduction;

break;
case 55:

    this.$ = new Node('LISTA_ID', '');
    this.$.setChild('LISTA_ID');
    this.$.setChild(new Node($$[$0-1],'COMMA'));
    this.$.setChild(new Node($$[$0],'ID'));
    this.$.traduction = $$[$0-2].traduction + ' ' + $$[$0-1] + ' ' + $$[$0];

break;
case 56:

           this.$ = new Node('LISTA_ID','');
           this.$.setChild(new Node($$[$0], 'ID'));
           this.$.traduction = $$[$0] + ' ';  
        
break;
case 57:

    this.$ = new Node('ASIGNACION','');
    this.$.setChild(new Node($$[$0-2], 'ASIGNACION'));
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction = $$[$0-2] + ' ' + $$[$0-1].traduction + $$[$0];

break;
case 58:

            this.$ = new Node('ASIGNACION');
            this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
            this.$.traduction = $$[$0];
          
break;
case 59:

    this.$ = new Node('SENTENCIA_PRINT','');
    this.$.setChild(new Node($$[$0-8], 'SYSTEM'));
    this.$.setChild(new Node($$[$0-7], 'PUNTO'));
    this.$.setChild(new Node($$[$0-6], 'OUT'));
    this.$.setChild(new Node($$[$0-5], 'PUNTO'));
    this.$.setChild($$[$0-4]);
    this.$.setChild(new Node($$[$0-3], 'PARENTIZQ'));
    this.$.setChild($$[$0-2]);
    this.$.setChild(new Node($$[$0-1], 'PARENTDER'));
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction = 'console.log(' + $$[$0-2].traduction + ')';

break;
case 60:

    this.$ = new Node('OPCION_PRINTLN', '');
    this.$.setChild(new Node($$[$0], 'PRINTLN'));
    this.$.traduction = "";

break;
case 61:

                this.$ = new Node('OPCION_PRINT', '');
                this.$.setChild(new Node($$[$0], 'PRINT'));
                this.$.traduction = "";
            
break;
case 62:

                     console.log("5.Error sintáctico en línea: " + this._$.first_line + " y columna: " + this._$.first_column); 
                     newError = new Error(yytext, this._$.first_line, this._$.first_column);
                        errorList.push(newError);
                    
break;
case 63:

    this.$ = new Node('SENTENCIA_IF', '');
    this.$.setChild(new Node($$[$0-2], 'IF'));
    this.$.setChild($$[$0-1]);
    if($$[$0].childList.length > 0) {
        this.$.setChild($$[$0]);
    }
    this.$.traduction = '\n' + $$[$0-2] + ' ' + $$[$0-1].traduction + ' ' + $$[$0].traduction;

break;
case 64:

                this.$ = new Node('SENTENCIA_IF', '');
                this.$.setChild(new Node($$[$0-4], 'IF'));
                this.$.setChild($$[$0-3]);
                this.$.setChild($$[$0-2]);
                this.$.setChild(new Node($$[$0-1], 'ELSE'));
                this.$.setChild($$[$0]);
                this.$.traduction = '\n' +$$[$0-4] + ' ' + $$[$0-3].traduction + ' ' + $$[$0-2].traduction + ' ' + $$[$0-1] + ' ' + $$[$0].traduction;
            
break;
case 65:

                this.$ = new Node('SENTENCIA_IF', '');
                this.$.setChild(new Node($$[$0-4], 'IF'));
                this.$.setChild($$[$0-3]);
                this.$.setChild($$[$0-2]);
                this.$.setChild(new Node($$[$0-1], 'ELSE'));
                this.$.setChild($$[$0]);
                this.$.traduction = '\n' +$$[$0-4] + ' '+ $$[$0-3].traduction + ' ' + $$[$0-2].traduction + ' ' + $$[$0-1] + ' ' + $$[$0].traduction;
            
break;
case 66:

    this.$ = new Node('SENTENCIA_WHILE','');
    this.$.setChild(new Node($$[$0-2], 'WHILE'));
    this.$.setChild($$[$0-1]);
    if($$[$0].childList.length > 0) {
        this.$.setChild($$[$0]);
    }
    this.$.traduction = '\n' + $$[$0-2] + $$[$0-1].traduction + ' ' + $$[$0].traduction;

break;
case 67:

    this.$ = new Node('SENTENCIA_DO_WHILE', '');
    this.$.setChild(new Node($$[$0-4], 'DO'));
    if($$[$0-3].childList.length > 0) {
        this.$.setChild($$[$0-3]);
    }
    this.$.setChild(new Node($$[$0-2], 'WHILE'));
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction =  '\n' +$$[$0-4] + ' ' + $$[$0-3].traduction + ' ' + $$[$0-2]  + $$[$0-1].traduction + $$[$0] + '\n';

break;
case 68:

    this.$ = new Node('SENTENCIA_FOR', '');
    this.$.setChild(new Node($$[$0-8], 'FOR'));
    this.$.setChild(new Node($$[$0-7], 'PARENTIZQ'));
    this.$.setChild($$[$0-6]);
    this.$.setChild(new Node($$[$0-5], 'PUNTO_COMA'));
    this.$.setChild($$[$0-4]);
    this.$.setChild(new Node($$[$0-3], 'PUNTO_COMA'));
    this.$.setChild($$[$0-2]);
    this.$.setChild(new Node($$[$0-1], 'PARENTDER'));
    if($$[$0].childList.length > 0) {
        this.$.setChild($$[$0]);
    }
    this.$.traduction = '\n' + $$[$0-8] + $$[$0-7] + $$[$0-6].traduction + $$[$0-5] + ' ' + $$[$0-4].traduction + $$[$0-3]  + ' ' + $$[$0-2].traduction + $$[$0-1] + $$[$0].traduction;

break;
case 69:

    this.$ = new Node('DECLARACION_FOR','');
    this.$.setChild($$[$0-3]);
    this.$.setChild(new Node($$[$0-2], 'ID'));
    this.$.setChild(new Node($$[$0-1], 'ASIGNACION'));
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-3].traduction + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0].traduction;

break;
case 70:

                    this.$ = new Node('DECLARACION_FOR','');
                    this.$.setChild(new Node($$[$0-2], 'ID'));
                    this.$.setChild(new Node($$[$0-1], 'ASIGNACION'));
                    this.$.setChild($$[$0]);
                    this.$.traduction = $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0].traduction;
               
break;
case 71:

    this.$ = new Node('INCR_DECR','');
    this.$.setChild(new Node($$[$0-1], 'ID'));
    this.$.setChild(new Node($$[$0], 'INCR'));
    this.$.traduction = $$[$0-1] + $$[$0];

break;
case 72:

                            this.$ = new Node('INCR_DECR','');
                            this.$.setChild(new Node($$[$0-1], 'ID'));
                            this.$.setChild(new Node($$[$0], 'DECR'));
                            this.$.traduction = $$[$0-1] + $$[$0];
                     
break;
case 73:

                            this.$ = new Node('INCR_DECR','');
                            this.$.setChild(new Node($$[$0-2], 'ID'));
                            this.$.setChild(new Node($$[$0-1], 'DECR'));
                            this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
                            this.$.traduction = '\n' + $$[$0-2] + $$[$0-1] + $$[$0];
                     
break;
case 74:

                            this.$ = new Node('INCR_DECR','');
                            this.$.setChild(new Node($$[$0-2], 'ID'));
                            this.$.setChild(new Node($$[$0-1], 'INCR'));
                            this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
                            this.$.traduction = '\n' + $$[$0-2] + $$[$0-1] + $$[$0];
                     
break;
case 75:
 
    this.$ = new Node('SENTENCIA_RETURN_METODOS','');
    this.$.setChild(new Node($$[$0-1], 'RETURN'));
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction = '\n' + $$[$0-1] + $$[$0] + '\n';

break;
case 76:
 
    this.$ = new Node('SENTENCIA_RETURN_FUNCIONES','');
    this.$.setChild(new Node($$[$0-2], 'RETURN'));
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction = '\n' + $$[$0-2] + ' '+ $$[$0-1].traduction +  $$[$0] + '\n';

break;
case 77:
 
    this.$ = new Node('SENTENCIA_BREAK','');
    this.$.setChild(new Node($$[$0-1], 'BREAK'));
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction = '\n' + $$[$0-1] + $$[$0] + '\n';

break;
case 78:
 
    this.$ = new Node('SENTENCIA_CONTINUE','');
    this.$.setChild(new Node($$[$0-1], 'CONTINUE'));
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction = '\n' + $$[$0-1] + $$[$0] + '\n';

break;
case 79:
 
    this.$ = new Node('ASIGNACION_SIMPLE','');
    this.$.setChild(new Node($$[$0-3], 'ID'));
    this.$.setChild(new Node($$[$0-2], 'ASIGNACION'));
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'COMA'));
    this.$.traduction = $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1].traduction + $$[$0] + '\n';

break;
case 80:
 
    this.$ = new Node('CONDICION','');  
    this.$.setChild(new Node($$[$0-2], 'PARENTIZQ'));  
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'PARENTDER'));
    this.$.traduction = $$[$0-2] + $$[$0-1].traduction + $$[$0];

break;
case 81:
 
        this.$ = new Node('EXPRESION',''); 
        this.$.setChild(new Node($$[$0-1], 'MENOS'));
        this.$.setChild($$[$0-1]);
        this.$.traduction = '-' + $$[$0].traduction;
    
break;
case 82:
 
                this.$ = new Node('EXPRESION',''); 
                this.$.setChild(new Node($$[$0-1], 'NEGACION'));
                this.$.setChild($$[$0]);
                this.$.traduction = '!' + $$[$0].traduction;
          
break;
case 83:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MAS'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' + ' + $$[$0].traduction;
          
break;
case 84:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MENOS'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' - ' + $$[$0].traduction;

          
break;
case 85:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MULT'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' * ' + $$[$0].traduction;
          
break;
case 86:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'DIVISION'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' / ' + $$[$0].traduction;
          
break;
case 87:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MAYOR_IGUAL'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' >= ' + $$[$0].traduction;
          
break;
case 88:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MENOR_IGUAL'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' <= ' + $$[$0].traduction;
          
break;
case 89:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MAYOR'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' > ' + $$[$0].traduction;
          
break;
case 90:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MENOR'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' < ' + $$[$0].traduction;
          
break;
case 91:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'IGUALDAD'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' == ' + $$[$0].traduction;
          
break;
case 92:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'NO_IGUAL'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' != ' + $$[$0].traduction;
          
break;
case 93:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'AND'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' && ' + $$[$0].traduction;
          
break;
case 94:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'OR'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' || ' + $$[$0].traduction;
          
break;
case 95:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'XOR'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' ^ ' + $$[$0].traduction;
          
break;
case 96:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'ENTERO'));
              this.$.traduction = $$[$0]
          
break;
case 97:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'DECIMAL'));
              this.$.traduction = $$[$0]
          
break;
case 98:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'TRUE'));
              this.$.traduction = $$[$0]
          
break;
case 99:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'FALSE'));
              this.$.traduction = $$[$0]
          
break;
case 100:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'STRING'));
              this.$.traduction = '"'+ $$[$0] +'"';
          
break;
case 101:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0-2], 'PARENTIZQ'));
              this.$.setChild($$[$0-1]);
              this.$.setChild(new Node($$[$0], 'PARENTDER'));
              this.$.traduction = $$[$0-2] + $$[$0-1].traduction + $$[$0];
          
break;
case 102:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'ID'));
              this.$.traduction = $$[$0]
          
break;
case 103:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'NULL'));
              this.$.traduction = $$[$0]
          
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:5,8:$V2,22:7},{1:[3]},{2:[1,12],5:[1,9],7:10,8:[1,11]},{2:$V0,3:13,4:2,5:$V1,6:3,7:5,8:$V2,22:14},{1:[2,3]},o($V3,[2,5]),o($V3,[2,6]),o($V3,[2,20]),{9:$V4,23:[1,16]},{1:[2,1]},o($V3,[2,4]),{9:$V4},o($V3,[2,8]),{1:[2,2]},o($V3,[2,19]),{10:[1,17]},{10:[1,18]},{2:[1,21],11:19,12:[1,20]},{12:[1,23],24:22},o($V3,[2,7]),{2:[1,27],8:$V5,13:24,14:[1,25],15:26},o($V3,[2,11]),o($V3,[2,21]),{8:$V6,14:[1,30],25:29,26:31},{2:[1,35],8:$V5,14:[1,33],15:34},o($V3,[2,10]),o($V7,[2,13]),o($V7,[2,14]),{16:36,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},{8:$V6,14:[1,43],26:44},o($V3,[2,23]),o($Ve,[2,25]),{16:45,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},o($V3,[2,9]),o($V7,[2,12]),o($V7,[2,16]),{10:[1,46]},{10:[2,48]},{10:[2,49]},{10:[2,50]},{10:[2,51]},{10:[2,52]},{10:[2,53]},o($V3,[2,22]),o($Ve,[2,24]),{10:[1,47]},{17:[1,48]},{17:[1,49]},{16:53,18:50,19:51,20:[1,52],44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},{16:53,19:55,20:[1,56],27:54,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},o($V7,[2,15]),{20:[1,57],29:$Vf},{12:$Vg,21:59},{10:[1,61]},o($Ve,[2,26]),{20:[1,62],29:$Vf},{28:[1,63]},{12:$Vg,21:64},{16:65,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},o($V7,[2,18]),{2:[1,69],10:$Vh,14:[1,67],16:91,30:68,31:70,32:71,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:79,41:80,42:81,43:66,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,54:$Vi,60:$Vj,63:$Vk,64:$Vl,65:$Vm,69:$Vn,70:$Vo,71:$Vp},o($Vq,[2,30]),{28:[1,92]},o($Ve,[2,28]),o($V7,[2,17]),{10:[1,93]},{10:$Vh,14:[1,94],16:91,30:95,31:70,32:71,33:72,34:73,35:74,36:75,37:76,38:77,39:78,40:79,41:80,42:81,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,54:$Vi,60:$Vj,63:$Vk,64:$Vl,65:$Vm,69:$Vn,70:$Vo,71:$Vp},o($Vr,[2,47]),o($Vs,[2,44]),o($Vs,[2,45]),o($Vs,[2,31]),o($Vs,[2,32]),o($Vs,[2,33]),o($Vs,[2,34]),o($Vs,[2,35]),o($Vs,[2,36]),o($Vs,[2,37]),o($Vs,[2,38]),o($Vs,[2,39]),o($Vs,[2,40]),o($Vs,[2,41]),o($Vs,[2,42]),{52:[1,96],67:$Vt,68:$Vu},{28:[1,99]},{28:[1,100]},{10:$Vv,17:$Vw,28:[1,101],53:102,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{17:[1,113]},{17:$VF,61:114},{12:$Vg,21:116},{17:$VF,61:117},{55:[1,118]},{10:[1,120],50:119},o($Ve,[2,27]),o($Vq,[2,29]),o($Vr,[2,46]),o($Vs,[2,43]),{10:$Vv,17:$Vw,53:121,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},o($VG,[2,71],{28:[1,122]}),o($VG,[2,72],{28:[1,123]}),o($Vs,[2,77]),o($Vs,[2,78]),o($Vs,[2,75]),{28:[1,124],72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT},{10:$Vv,17:$Vw,53:138,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{10:$Vv,17:$Vw,53:139,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},o($VU,[2,96]),o($VU,[2,97]),o($VU,[2,98]),o($VU,[2,99]),o($VU,[2,100]),{10:$Vv,17:$Vw,53:140,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},o($VU,[2,102]),o($VU,[2,103]),{10:[1,143],16:142,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,66:141},{12:$Vg,21:144},{10:$Vv,17:$Vw,53:145,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{63:[1,146]},{12:$Vg,21:147},{56:[1,148]},{28:[1,152],29:[1,150],51:149,52:[1,151]},o($VV,[2,56]),{28:[1,153],72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT},o($VG,[2,74]),o($VG,[2,73]),o($Vs,[2,76]),{10:$Vv,17:$Vw,53:154,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{10:$Vv,17:$Vw,53:155,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{10:$Vv,17:$Vw,53:156,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{10:$Vv,17:$Vw,53:157,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{10:$Vv,17:$Vw,53:158,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{10:$Vv,17:$Vw,53:159,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{10:$Vv,17:$Vw,53:160,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{10:$Vv,17:$Vw,53:161,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{10:$Vv,17:$Vw,53:162,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{10:$Vv,17:$Vw,53:163,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{10:$Vv,17:$Vw,53:164,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{10:$Vv,17:$Vw,53:165,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{10:$Vv,17:$Vw,53:166,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},o($VW,[2,81],{85:$VT}),o($VW,[2,82],{85:$VT}),{20:[1,167],72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT},{28:[1,168]},{10:[1,169]},{52:[1,170]},o($Vs,[2,66]),{20:[1,171],72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT},{17:$VF,61:172},o($Vs,[2,63],{62:[1,173]}),{55:[1,174]},o($Vs,[2,54]),{10:[1,175]},{10:$Vv,17:$Vw,53:176,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},o($Vs,[2,58]),o($Vs,[2,79]),o($VX,[2,83],{75:$VJ,76:$VK,85:$VT}),o($VX,[2,84],{75:$VJ,76:$VK,85:$VT}),o($VW,[2,85],{85:$VT}),o($VW,[2,86],{85:$VT}),o($VY,[2,87],{72:$VH,74:$VI,75:$VJ,76:$VK,85:$VT}),o($VY,[2,88],{72:$VH,74:$VI,75:$VJ,76:$VK,85:$VT}),o($VY,[2,89],{72:$VH,74:$VI,75:$VJ,76:$VK,85:$VT}),o($VY,[2,90],{72:$VH,74:$VI,75:$VJ,76:$VK,85:$VT}),o($VZ,[2,91],{72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,85:$VT}),o($VZ,[2,92],{72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,85:$VT}),o([20,28,83,84],[2,93],{72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,85:$VT}),o([20,28,84],[2,94],{72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,85:$VT}),o([20,28],[2,95],{72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT}),o($VU,[2,101]),{10:$Vv,17:$Vw,53:177,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{52:[1,178]},{10:$Vv,17:$Vw,53:179,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},o([12,28],[2,80]),{28:[1,180]},{12:$Vg,21:182,38:181,60:$Vj},{2:[1,186],57:183,58:[1,184],59:[1,185]},o($VV,[2,55]),{28:[1,187],72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT},{28:[1,188],72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT},{10:$Vv,17:$Vw,53:189,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{28:[2,70],72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT},o($Vs,[2,67]),o($Vs,[2,64]),o($Vs,[2,65]),{17:[1,190]},{17:[2,60]},{17:[2,61]},{17:[2,62]},o($Vs,[2,57]),{10:[1,192],42:191},{28:[2,69],72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT},{10:$Vv,17:$Vw,53:193,72:$Vx,73:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE},{20:[1,194]},{67:$Vt,68:$Vu},{20:[1,195],72:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT},{12:$Vg,21:196},{28:[1,197]},o($Vs,[2,68]),o($Vs,[2,59])],
defaultActions: {4:[2,3],9:[2,1],13:[2,2],37:[2,48],38:[2,49],39:[2,50],40:[2,51],41:[2,52],42:[2,53],184:[2,60],185:[2,61],186:[2,62]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Node = require('./AST/node');
    const Error = require('./AST/error');
    const ScanError = require('./Error/scanError');
    var errorList = [];
    var serrorList = [];
    var nodeList = [];
    this.traduction = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:  
break;
case 2:
break;
case 3: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 90; 
break;
case 4:return 87;
break;
case 5:return 86;
break;
case 6:return 90;		
break;
case 7:return 'DOS_PUNTOS';
break;
case 8:return 28;
break;
case 9:return 29
break;
case 10:return 67;           
break;
case 11:return 74;
break;
case 12:return 68;   
break;
case 13:return 72;
break;
case 14:return 76;
break;
case 15:return 75;
break;
case 16:return 55;
break;
case 17:return 80;           
break;
case 18:return 79;           
break;
case 19:return 78;           
break;
case 20:return 77; 
break;
case 21:return 81;           
break;
case 22:return 82;           
break;
case 23:return 84;           
break;
case 24:return 83;           
break;
case 25:return 85;     
break;
case 26:return 73;           
break;
case 27:return 52;
break;
case 28:return 17;
break;
case 29:return 20;
break;
case 30:return 'BRACKIZQ';
break;
case 31:return 'BRACKDER';
break;
case 32:return 12;
break;
case 33:return 14;
break;
case 34:return 8;
break;
case 35:return 9;
break;
case 36:return 23;
break;
case 37:return 45;
break;
case 38:return 47;
break;
case 39:return 44;
break;
case 40:return 49;   
break;
case 41:return 46;
break;
case 42:return 91;           
break;
case 43:return 48;           
break;
case 44:return 60;           
break;
case 45:return 62;           
break;
case 46:return 65;           
break;
case 47:return 63;           
break;
case 48:return 64;           
break;
case 49:return 88;   
break;
case 50:return 89;     
break;
case 51:return 'RESERVADA_STATIC';           
break;
case 52:return 'RESERVADA_MAIN';           
break;
case 53:return 71;          
break;
case 54:return 70;           
break;
case 55:return 54; 
break;
case 56:return 56;           
break;
case 57:return 58; 
break;
case 58:return 59;          
break;
case 59:return 69;  
break;
case 60:return 10;
break;
case 61:return 5;
break;
case 62: console.error('Este es un error léxico: ' + yy_.yytext + '  en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:\n)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]:)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:char\b)/i,/^(?:null\b)/i,/^(?:String\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:return\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}