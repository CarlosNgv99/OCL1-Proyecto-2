/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,4],$V2=[1,9],$V3=[1,10],$V4=[1,11],$V5=[2,5,10,55,56],$V6=[2,5,10,12,16,22,24,55,56,58,59,60,61,65,71,73,74,75,76,80,81,82],$V7=[1,33],$V8=[1,37],$V9=[2,10,16],$Va=[1,48],$Vb=[1,47],$Vc=[1,43],$Vd=[1,44],$Ve=[1,45],$Vf=[1,46],$Vg=[10,16],$Vh=[1,67],$Vi=[1,69],$Vj=[1,95],$Vk=[1,103],$Vl=[1,102],$Vm=[1,100],$Vn=[1,101],$Vo=[1,99],$Vp=[1,98],$Vq=[1,96],$Vr=[1,97],$Vs=[2,10,12,16,22,24,55,56,58,59,60,61,65,71,73,74,75,76,80,81,82],$Vt=[28,37],$Vu=[12,16,22,24,55,56,58,59,60,61,65,71,74,75,76,80,81,82],$Vv=[1,112],$Vw=[1,113],$Vx=[1,127],$Vy=[1,120],$Vz=[1,121],$VA=[1,122],$VB=[1,123],$VC=[1,124],$VD=[1,125],$VE=[1,126],$VF=[1,128],$VG=[1,131],$VH=[1,139],$VI=[12,16,22,24,28,55,56,58,59,60,61,65,71,74,75,76,80,81,82],$VJ=[1,147],$VK=[1,146],$VL=[1,148],$VM=[1,149],$VN=[1,150],$VO=[1,151],$VP=[1,152],$VQ=[1,153],$VR=[1,154],$VS=[1,155],$VT=[1,156],$VU=[1,157],$VV=[1,158],$VW=[2,122],$VX=[28,36,54,83,85,86,87,88,89,90,91,92,93,94,95,96],$VY=[36,37,64],$VZ=[28,36,54,83,85,86,87,88,89,90,91,92,93,94,95],$V_=[28,36,54,83,85,88,89,90,91,92,93,94,95],$V$=[28,36,54,88,89,90,91,92,93,94,95],$V01=[28,36,54,92,93,94,95],$V11=[2,120],$V21=[2,121];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_clases":4,"EOF":5,"lista_interfaces":6,"sentencia_clase":7,"sentencia_interfaz":8,"comentario":9,"RESERVADA_PUBLIC":10,"RESERVADA_CLASS":11,"ID":12,"bloque_declaracion_metodos_funciones":13,"LLAVEIZQ":14,"lista_declaracion_metodos_funciones":15,"LLAVEDER":16,"declaracion_metodos_funciones":17,"tipo":18,"PARENTIZQ":19,"declaracion_parametros_mf":20,"RESERVADA_STATIC":21,"RESERVADA_VOID":22,"RESERVADA_MAIN":23,"RESERVADA_STRING":24,"BRACKIZQ":25,"BRACKDER":26,"RESERVADA_ARGS":27,"PARENTDER":28,"instrucciones_llaves":29,"lista_parametros":30,"RESERVADA_INTERFACE":31,"bloque_declaracion_funcion":32,"lista_declaracion_funciones":33,"declaracion_funcion":34,"declaracion_parametros_funcion":35,"PUNTO_COMA":36,"COMA":37,"instruccion":38,"asignacion_simple":39,"sentencia_break":40,"sentencia_continue":41,"sentencia_return_metodos":42,"sentencia_for":43,"sentencia_while":44,"sentencia_do_while":45,"sentencia_if":46,"sentencia_return_funciones":47,"sentencia_print":48,"declaracion_variable":49,"incremento_decremento":50,"llamada_metodo":51,"lista_parametros_llamada":52,"expresion":53,"COMMA":54,"COMENTARIO_UNILINEA":55,"COMENTARIO_MULTILINEA":56,"lista_instrucciones":57,"RESERVADA_BOOLEAN":58,"RESERVADA_INT":59,"RESERVADA_CHAR":60,"RESERVADA_DOUBLE":61,"lista_id":62,"asignacion":63,"ASIGNACION":64,"RESERVADA_SYSTEM":65,"PUNTO":66,"RESERVADA_OUT":67,"opcion_print":68,"RESERVADA_PRINTLN":69,"RESERVADA_PRINT":70,"RESERVADA_IF":71,"condicion":72,"RESERVADA_ELSE":73,"RESERVADA_WHILE":74,"RESERVADA_DO":75,"RESERVADA_FOR":76,"declaracion_for":77,"INCR":78,"DECR":79,"RESERVADA_RETURN":80,"RESERVADA_BREAK":81,"RESERVADA_CONTINUE":82,"MENOS":83,"NEG":84,"MAS":85,"MULT":86,"DIVISION":87,"MAYOR_IGUAL":88,"MENOR_IGUAL":89,"MAYOR":90,"MENOR":91,"IGUALDAD":92,"DESIGUALDAD":93,"AND":94,"OR":95,"XOR":96,"ENTERO":97,"DECIMAL":98,"RESERVADA_TRUE":99,"RESERVADA_FALSE":100,"STRING":101,"RESERVADA_NULL":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"RESERVADA_PUBLIC",11:"RESERVADA_CLASS",12:"ID",14:"LLAVEIZQ",16:"LLAVEDER",19:"PARENTIZQ",21:"RESERVADA_STATIC",22:"RESERVADA_VOID",23:"RESERVADA_MAIN",24:"RESERVADA_STRING",25:"BRACKIZQ",26:"BRACKDER",27:"RESERVADA_ARGS",28:"PARENTDER",31:"RESERVADA_INTERFACE",36:"PUNTO_COMA",37:"COMA",54:"COMMA",55:"COMENTARIO_UNILINEA",56:"COMENTARIO_MULTILINEA",58:"RESERVADA_BOOLEAN",59:"RESERVADA_INT",60:"RESERVADA_CHAR",61:"RESERVADA_DOUBLE",64:"ASIGNACION",65:"RESERVADA_SYSTEM",66:"PUNTO",67:"RESERVADA_OUT",69:"RESERVADA_PRINTLN",70:"RESERVADA_PRINT",71:"RESERVADA_IF",73:"RESERVADA_ELSE",74:"RESERVADA_WHILE",75:"RESERVADA_DO",76:"RESERVADA_FOR",78:"INCR",79:"DECR",80:"RESERVADA_RETURN",81:"RESERVADA_BREAK",82:"RESERVADA_CONTINUE",83:"MENOS",84:"NEG",85:"MAS",86:"MULT",87:"DIVISION",88:"MAYOR_IGUAL",89:"MENOR_IGUAL",90:"MAYOR",91:"MENOR",92:"IGUALDAD",93:"DESIGUALDAD",94:"AND",95:"OR",96:"XOR",97:"ENTERO",98:"DECIMAL",99:"RESERVADA_TRUE",100:"RESERVADA_FALSE",101:"STRING",102:"RESERVADA_NULL"},
productions_: [0,[3,2],[3,2],[3,1],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[7,4],[7,1],[7,1],[13,3],[13,2],[13,1],[13,1],[15,2],[15,1],[15,1],[17,5],[17,11],[17,1],[20,3],[20,2],[6,2],[6,1],[8,4],[32,3],[32,2],[33,2],[33,1],[34,5],[35,3],[35,2],[30,4],[30,2],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[51,4],[51,5],[52,3],[52,1],[9,1],[9,1],[57,2],[57,1],[57,1],[57,1],[29,3],[29,1],[29,2],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[49,3],[62,3],[62,1],[63,3],[63,1],[48,9],[68,1],[68,1],[68,1],[46,3],[46,5],[46,5],[44,3],[45,5],[43,9],[77,4],[77,3],[50,2],[50,2],[50,3],[50,3],[42,2],[47,3],[47,4],[47,4],[40,2],[41,2],[39,4],[72,3],[53,2],[53,2],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,1],[53,1],[53,1],[53,1],[53,1],[53,3],[53,3],[53,3],[53,1],[53,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    this.$ = new Node('INICIO', '');
    this.$.setChild($$[$0-1]);
    this.$.nodeList = nodeList;
    this.$.traduction = $$[$0-1].traduction;
    this.traduction = this.$.traduction;
    this.$.errorList = errorList;
    this.$.tokenList = tokenList;
    return this.$;

break;
case 2:
 
            this.$ = new Node('INICIO', '');
            this.$.setChild($$[$0-1]);
            this.$.nodeList = nodeList;
            this.$.traduction = $$[$0-1].traduction;
            this.traduction = this.$.traduction;
            this.$.errorList = errorList;
            this.$.tokenList = tokenList;
            return this.$;
      
break;
case 3:
  
break;
case 4:
 
    this.$ = new Node('LISTA_CLASES','');
    this.$.setChild($$[$0-1]);
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-1].traduction + ' ' + $$[$0].traduction;

break;
case 5:

                this.$ = new Node('LISTA_CLASES','');
                this.$.setChild($$[$0-1]);
                this.$.traduction = $$[$0-1].traduction + ' ' + $$[$0].traduction;
            
break;
case 6:
 
                this.$ = new Node('LISTA_CLASES','');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction
            
break;
case 7:

                this.$ = new Node('LISTA_CLASES','');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction
            
break;
case 8:

                this.$ = new Node('LISTA_CLASES', '');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction;
            
break;
case 9: case 19: case 60:

                        newError = new Error(yytext, this._$.first_line, this._$.first_column);
                        errorList.push(newError);
                        console.log("4.Error sintáctico en línea: " + this._$.first_line + " y columna: " + this._$.first_column); 
                    
break;
case 10:
 
    this.$ = new Node('SENTENCIA_CLASE', ' ');
    this.$.setChild(new Node($$[$0-3], 'PUBLIC'));
    this.$.setChild(new Node($$[$0-2], 'CLASS'));
    this.$.setChild(new Node($$[$0-1], 'ID'));
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0].traduction; // class hola
 
break;
case 11:

                this.$ = new Node('SENTENCIA_CLASE', '');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction;
            
break;
case 12:

                     console.log("1. Error sintáctico en línea: " + this._$.first_line + " y columna: " + this._$.first_column); 
                     newError = new Error(yytext, this._$.first_line, this._$.first_column);
                     errorList.push(newError);
                
break;
case 13:
 
    this.$ = new Node('BLOQUE_DECLARACION_MF', ' ');
    this.$.setChild(new Node($$[$0-2], 'LLAVEIZQ'));
    if($$[$0-1].childList.length > 0) {
        this.$.setChild($$[$0-1]);
    }
    this.$.setChild(new Node($$[$0], 'LLAVEDER'));
    this.$.traduction = $$[$0-2] + '\n' + 'constructor(){}\n' + $$[$0-1].traduction + '\n' +$$[$0] + '\n' // { instrucciones }

break;
case 14:
 
                                 this.$ = new Node('BLOQUE_DECLARACION_MF', ' ');
                                 this.$.setChild(new Node($$[$0-1], 'LLAVEIZQ'));
                                 this.$.setChild(new Node($$[$0], 'LLAVEDER'));
                                 this.$.traduction = $$[$0-1] + $$[$0];
                             
break;
case 15:

                this.$ = new Node('BLOQUE_DECLARACION_MF', '');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction;
            
break;
case 16:

                                console.log("2. Error sintáctico en línea: " + this._$.first_line + " y columna: " + this._$.first_column); 
                                newError = new Error(yytext, this._$.first_line, this._$.first_column);
                                errorList.push(newError);
                             
break;
case 17:
 
    this.$ = new Node('LISTA_DECLARACION_MF', '');
    this.$.setChild($$[$0-1]);
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-1].traduction + ' ' + $$[$0].traduction;

break;
case 18:
 
                                        this.$ = new Node('LISTA_DECLARACION_MF', '');
                                        this.$.setChild($$[$0]);
                                        this.$.traduction = $$[$0].traduction;
                                    
break;
case 20:
 
    this.$ = new Node('DECLARACION_MF', '');
    this.$.setChild(new Node($$[$0-4], 'PUBLIC'));
    this.$.setChild($$[$0-3]);
    this.$.setChild(new Node($$[$0-2], 'ID'));
    this.$.setChild(new Node($$[$0-1], 'PARENTIZQ'));
    this.$.setChild($$[$0]);
    this.$.traduction = 'function ' + $$[$0-2] + $$[$0-1] + $$[$0].traduction;

break;
case 21:

                                this.$ = new Node('SENTENCIA_MAIN','');
                                this.$.setChild(new Node($$[$0-10], 'PUBLIC'));
                                this.$.setChild(new Node($$[$0-9], 'STATIC'));
                                this.$.setChild(new Node($$[$0-8], 'VOID'));
                                this.$.setChild(new Node($$[$0-7], 'MAIN'));
                                this.$.setChild(new Node($$[$0-6], 'PARENTIZQ'));
                                this.$.setChild(new Node($$[$0-5], 'STRING'));
                                this.$.setChild(new Node($$[$0-4], 'BRACKIZQ'));
                                this.$.setChild(new Node($$[$0-3], 'BRACKDER'));
                                this.$.setChild(new Node($$[$0-2], 'ARGS'));
                                this.$.setChild(new Node($$[$0-1], 'PARENTDER'));
                                this.$.setChild($$[$0]);
                                this.$.traduction = 'function main()' + $$[$0].traduction;
                            
break;
case 22:

                                newError = new Error(yytext, this._$.first_line, this._$.first_column);
                                errorList.push(newError);
                                console.log("3.Error sintáctico en línea: " + this._$.first_line + " y columna: " + this._$.first_column); 
                             
break;
case 23:
 
    this.$ = new Node('DECLARACION_PARAMETROS_MF', '');
    this.$.setChild($$[$0-2]);
    this.$.setChild(new Node($$[$0], 'PARENTDER'));
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-2].traduction + $$[$0-1] + ' ' + $$[$0].traduction;

break;
case 24:
 
                                this.$ = new Node('DECLARACION_PARAMETROS_MF', '');
                                this.$.setChild(new Node($$[$0-1], 'PARENTDER'));
                                this.$.setChild($$[$0]);
                                this.$.traduction = $$[$0-1] + ' ' + $$[$0].traduction;
                         
break;
case 25:
 
    this.$ = new Node('LISTA_INTERFACES', '');
    this.$.setChild($$[$0-1]);
    this.$.setChild($$[$0]);

break;
case 26:
 
                    this.$ = new Node('LISTA_INTERFACES', '');
                    this.$.setChild($$[$0]);
                
break;
case 27:
 
    this.$ = new Node('SENTENCIA_INTERFAZ', '');
    this.$.setChild(new Node($$[$0-3],'PUBLIC'));
    this.$.setChild(new Node($$[$0-2],'INTERFACE'));
    this.$.setChild(new Node($$[$0-1],'ID'));
    this.$.setChild(new Node($$[$0]));
    this.$.traduction =  'class' + ' ' + $$[$0-1]+ $$[$0].traduction;

break;
case 28:
 
    this.$ = new Node('BLOQUE_DECLARACION_FUNC', '');
    this.$.setChild(new Node($$[$0-2],'LLAVEIZQ'));
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0],'LLAVEDER'));
    this.$.traduction = $$[$0-2] + '\n' + $$[$0-1].traduction + '\n' + $$[$0];

break;
case 29:
 
                        this.$ = new Node('BLOQUE_DECLARACION_FUNC', '');
                        this.$.setChild(new Node($$[$0-1],'LLAVEIZQ'));
                        this.$.setChild(new Node($$[$01],'LLAVEDER'));
                        this.$.traduction = $$[$0-1] + $$[$0];

                     
break;
case 30:
 
    this.$ = new Node('LISTA_DECLARACION_FUNC', '');
    this.$.setChild($$[$0-1]);
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-1].traduction + $$[$0].traduction

break;
case 31:
 
                                this.$ = new Node('LISTA_DECLARACION_FUNC', '');
                                this.$.setChild($$[$0]);
                                this.$.traduction = $$[$0].traduction;
                           
break;
case 32:
 
    this.$ = new Node('DECLARACION_FUNC', '');
    this.$.setChild(new Node($$[$0-4],'PUBLIC'));
    this.$.setChild($$[$0-3]);
    this.$.setChild(new Node($$[$0-2],'ID'));
    this.$.setChild(new Node($$[$0-1],'PARENTIZQ'));
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-4] + ' ' + $$[$0-3].traduction + ' ' + $$[$0-2] + $$[$0-1] + $$[$0].traduction;

break;
case 33:
 
    this.$ = new Node('DECLARACION_PARAMETROS_FUNC', '');
    this.$.setChild($$[$0-2]);
    this.$.setChild(new Node($$[$0-1],'PARENTDER'));
    this.$.setChild(new Node($$[$0],'PUNTO_COMA'));
    this.$.traduction = $$[$0-2].traduction + $$[$0-1] + $$[$0];

break;
case 34:
 
                                this.$ = new Node('DECLARACION_PARAMETROS_FUNC', '');
                                this.$.setChild(new Node($$[$0-1],'PARENTDER'));
                                this.$.setChild(new Node($$[$0],'PUNTO_COMA'));  
                                this.$.traduction = $$[$0-1] + $$[$0];
                              
break;
case 35:
 
    this.$ = new Node('LISTA_PARAMETROS', '');
    this.$.setChild($$[$0-3]);
    this.$.setChild(new Node($$[$0-2], 'COMA'));
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'ID'));
    this.$.traduction = $$[$0-3].traduction + $$[$0-2] + $$[$0];
    
break;
case 36:
 
                    this.$ = new Node('LISTA_PARAMETROS', '');
                    this.$.setChild($$[$0-1]);
                    this.$.setChild(new Node($$[$0], 'ID'));
                    this.$.traduction =  $$[$0];
                
break;
case 37:
 
                        this.$ = new Node('INSTRUCCION','');
                        this.$.setChild($$[$0]);
                        this.$.traduction = $$[$0].traduction;
                        
break;
case 38:
  
                this.$ = new Node('INSTRUCCION','');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction;
           
break;
case 39: case 40: case 41: case 42: case 43: case 44: case 45:
 
                this.$ = new Node('INSTRUCCION','');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction;
           
break;
case 46: case 47:

                this.$ = new Node('INSTRUCCION','');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction;
           
break;
case 48: case 49: case 50:
 
               this.$ = new Node('INSTRUCCION','');
               this.$.setChild($$[$0]);
               this.$.traduction = $$[$0].traduction;
           
break;
case 51:

    this.$ = new Node('LLAMADA_METODO', '');
    this.$.setChild(new Node($$[$0-3], 'ID'));
    this.$.setChild(new Node($$[$0-2], 'PARENTIZQ'));  
    this.$.setChild(new Node($$[$0-1], 'PARENTDER'));
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA')); 
    this.$.traduction = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];

break;
case 52:

                this.$ = new Node('LLAMADA_METODO', '');
                this.$.setChild(new Node($$[$0-4], 'ID'));
                this.$.setChild(new Node($$[$0-3], 'PARENTIZQ')); 
                this.$.setChild($$[$0-2]); 
                this.$.setChild(new Node($$[$0-1], 'PARENTDER'));
                this.$.setChild(new Node($$[$0], 'PUNTO_COMA')); 
                this.$.traduction = $$[$0-4] + $$[$0-3] + $$[$0-2].traduction + $$[$0-1] + $$[$0];
            
break;
case 53:

                this.$ = new Node('LST_PARAMETROS_LLAMADA', '');
                this.$.setChild($$[$0-2]);
                this.$.setChild(new Node($$[$0-1], 'COMMA'));
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0-2].traduction + $$[$0-1] + $$[$0].traduction;


break;
case 54:

                            this.$ = new Node('LST_PARAMETROS_LLAMADA', '');
                            this.$.setChild($$[$0]);
                            this.$.traduction = $$[$0].traduction;
                        
break;
case 55:

    this.$ = new Node('COMENTARIO','');
    this.$.setChild(new Node($$[$0], 'COMENTARIO_UNILINEA')); 
    this.$.traduction = $$[$0] + '\n';

break;
case 56:

    this.$ = new Node('COMENTARIO','');
    this.$.setChild(new Node($$[$0], 'COMENTARIO_MULTILINEA')); 
    this.$.traduction = $$[$0] + '\n';

break;
case 57:
 
    this.$ = new Node('LISTA_INSTRUCCIONES','');
    this.$.setChild($$[$0-1]);
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-1].traduction + ' '+ $$[$0].traduction;

break;
case 58:

                this.$ = new Node('LISTA_INSTRUCCIONES', '');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction;
            
break;
case 59:
 
                        this.$ = new Node('LISTA_INSTRUCCIONES','');
                        this.$.setChild($$[$0]);
                        this.$.traduction = $$[$0].traduction;
                   
break;
case 61:
 
    this.$ = new Node('INSTR_LLAVES', '');
    this.$.setChild(new Node($$[$0-2], 'LLAVEIZQ'));
    if($$[$0-1].childList.length > 0) {
        this.$.setChild($$[$0-1])
    }
    //this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'LLAVEDER'));
    this.$.traduction = $$[$0-2] + '\n' + $$[$0-1].traduction  +'\n' + $$[$0]; // { instrucciones }
    


break;
case 62:

                this.$ = new Node('INSTR_LLAVES', '');
                this.$.setChild($$[$0]);
                this.$.traduction = $$[$0].traduction;
                
break;
case 63:
 
                        this.$ = new Node('INSTR_LLAVES', '');
                        this.$.setChild(new Node($$[$0-1], 'LLAVEIZQ'));
                        this.$.setChild(new Node($$[$0], 'LLAVEDER'));
                        this.$.traduction = $$[$0-1] + $$[$0] + '\n';  // {}
                        
                    
break;
case 64:
 this.$ = new Node('TIPO',''); this.$.setChild(new Node('boolean','RESERVADA')); this.$.traduction = 'var ';
break;
case 65:
 this.$ = new Node('TIPO',''); this.$.setChild(new Node('int','RESERVADA')); this.$.traduction = 'var ';
break;
case 66:
 this.$ = new Node('TIPO',''); this.$.setChild(new Node('char','RESERVADA')); this.$.traduction = 'var ';
break;
case 67:
 this.$ = new Node('TIPO',''); this.$.setChild(new Node('double','RESERVADA')); this.$.traduction = 'var ';
break;
case 68:
 this.$ = new Node('TIPO',''); this.$.setChild(new Node('String','RESERVADA')); this.$.traduction = 'var ';
break;
case 69:
 this.$ = new Node('TIPO',''); this.$.setChild(new Node('void','RESERVADA')); this.$.traduction = '';
break;
case 70:

    this.$ = new Node('DECLARACION_VARIABLE', ''); 
    this.$.setChild($$[$0-2]);
    if($$[$0-1].childList.length > 0) {
        this.$.setChild($$[$0-1]);
    }
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-2].traduction + $$[$0-1].traduction + $$[$0].traduction;

break;
case 71:

    this.$ = new Node('LISTA_ID', '');
    this.$.setChild('LISTA_ID');
    this.$.setChild(new Node($$[$0-1],'COMMA'));
    this.$.setChild(new Node($$[$0],'ID'));
    this.$.traduction = $$[$0-2].traduction + ' ' + $$[$0-1] + ' ' + $$[$0];

break;
case 72:

           this.$ = new Node('LISTA_ID','');
           this.$.setChild(new Node($$[$0], 'ID'));
           this.$.traduction = $$[$0] + ' ';  
        
break;
case 73:

    this.$ = new Node('ASIGNACION','');
    this.$.setChild(new Node($$[$0-2], 'ASIGNACION'));
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction = $$[$0-2] + ' ' + $$[$0-1].traduction + $$[$0];

break;
case 74:

            this.$ = new Node('ASIGNACION');
            this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
            this.$.traduction = $$[$0];
          
break;
case 75:

    this.$ = new Node('SENTENCIA_PRINT','');
    this.$.setChild(new Node($$[$0-8], 'SYSTEM'));
    this.$.setChild(new Node($$[$0-7], 'PUNTO'));
    this.$.setChild(new Node($$[$0-6], 'OUT'));
    this.$.setChild(new Node($$[$0-5], 'PUNTO'));
    this.$.setChild($$[$0-4]);
    this.$.setChild(new Node($$[$0-3], 'PARENTIZQ'));
    this.$.setChild($$[$0-2]);
    this.$.setChild(new Node($$[$0-1], 'PARENTDER'));
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction = 'console.log(' + $$[$0-2].traduction + ')';

break;
case 76:

    this.$ = new Node('OPCION_PRINTLN', '');
    this.$.setChild(new Node($$[$0], 'PRINTLN'));
    this.$.traduction = "";

break;
case 77:

                this.$ = new Node('OPCION_PRINT', '');
                this.$.setChild(new Node($$[$0], 'PRINT'));
                this.$.traduction = "";
            
break;
case 78:

                     console.log("5.Error sintáctico en línea: " + this._$.first_line + " y columna: " + this._$.first_column); 
                     newError = new Error(yytext, this._$.first_line, this._$.first_column);
                        errorList.push(newError);
                    
break;
case 79:

    this.$ = new Node('SENTENCIA_IF', '');
    this.$.setChild(new Node($$[$0-2], 'IF'));
    this.$.setChild($$[$0-1]);
    if($$[$0].childList.length > 0) {
        this.$.setChild($$[$0]);
    }
    this.$.traduction = '\n' + $$[$0-2] + ' ' + $$[$0-1].traduction + ' ' + $$[$0].traduction;

break;
case 80:

                this.$ = new Node('SENTENCIA_IF', '');
                this.$.setChild(new Node($$[$0-4], 'IF'));
                this.$.setChild($$[$0-3]);
                this.$.setChild($$[$0-2]);
                this.$.setChild(new Node($$[$0-1], 'ELSE'));
                this.$.setChild($$[$0]);
                this.$.traduction = '\n' +$$[$0-4] + ' ' + $$[$0-3].traduction + ' ' + $$[$0-2].traduction + ' ' + $$[$0-1] + ' ' + $$[$0].traduction;
            
break;
case 81:

                this.$ = new Node('SENTENCIA_IF', '');
                this.$.setChild(new Node($$[$0-4], 'IF'));
                this.$.setChild($$[$0-3]);
                this.$.setChild($$[$0-2]);
                this.$.setChild(new Node($$[$0-1], 'ELSE'));
                this.$.setChild($$[$0]);
                this.$.traduction = '\n' +$$[$0-4] + ' '+ $$[$0-3].traduction + ' ' + $$[$0-2].traduction + ' ' + $$[$0-1] + ' ' + $$[$0].traduction;
            
break;
case 82:

    this.$ = new Node('SENTENCIA_WHILE','');
    this.$.setChild(new Node($$[$0-2], 'WHILE'));
    this.$.setChild($$[$0-1]);
    if($$[$0].childList.length > 0) {
        this.$.setChild($$[$0]);
    }
    this.$.traduction = '\n' + $$[$0-2] + $$[$0-1].traduction + ' ' + $$[$0].traduction;

break;
case 83:

    this.$ = new Node('SENTENCIA_DO_WHILE', '');
    this.$.setChild(new Node($$[$0-4], 'DO'));
    if($$[$0-3].childList.length > 0) {
        this.$.setChild($$[$0-3]);
    }
    this.$.setChild(new Node($$[$0-2], 'WHILE'));
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction =  '\n' +$$[$0-4] + ' ' + $$[$0-3].traduction + ' ' + $$[$0-2]  + $$[$0-1].traduction + $$[$0] + '\n';

break;
case 84:

    this.$ = new Node('SENTENCIA_FOR', '');
    this.$.setChild(new Node($$[$0-8], 'FOR'));
    this.$.setChild(new Node($$[$0-7], 'PARENTIZQ'));
    this.$.setChild($$[$0-6]);
    this.$.setChild(new Node($$[$0-5], 'PUNTO_COMA'));
    this.$.setChild($$[$0-4]);
    this.$.setChild(new Node($$[$0-3], 'PUNTO_COMA'));
    this.$.setChild($$[$0-2]);
    this.$.setChild(new Node($$[$0-1], 'PARENTDER'));
    if($$[$0].childList.length > 0) {
        this.$.setChild($$[$0]);
    }
    this.$.traduction = '\n' + $$[$0-8] + $$[$0-7] + $$[$0-6].traduction + $$[$0-5] + ' ' + $$[$0-4].traduction + $$[$0-3]  + ' ' + $$[$0-2].traduction + $$[$0-1] + $$[$0].traduction;

break;
case 85:

    this.$ = new Node('DECLARACION_FOR','');
    this.$.setChild($$[$0-3]);
    this.$.setChild(new Node($$[$0-2], 'ID'));
    this.$.setChild(new Node($$[$0-1], 'ASIGNACION'));
    this.$.setChild($$[$0]);
    this.$.traduction = $$[$0-3].traduction + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0].traduction;

break;
case 86:

                    this.$ = new Node('DECLARACION_FOR','');
                    this.$.setChild(new Node($$[$0-2], 'ID'));
                    this.$.setChild(new Node($$[$0-1], 'ASIGNACION'));
                    this.$.setChild($$[$0]);
                    this.$.traduction = $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0].traduction;
               
break;
case 87:

    this.$ = new Node('INCR_DECR','');
    this.$.setChild(new Node($$[$0-1], 'ID'));
    this.$.setChild(new Node($$[$0], 'INCR'));
    this.$.traduction = $$[$0-1] + $$[$0];

break;
case 88:

                            this.$ = new Node('INCR_DECR','');
                            this.$.setChild(new Node($$[$0-1], 'ID'));
                            this.$.setChild(new Node($$[$0], 'DECR'));
                            this.$.traduction = $$[$0-1] + $$[$0];
                     
break;
case 89:

                            this.$ = new Node('INCR_DECR','');
                            this.$.setChild(new Node($$[$0-2], 'ID'));
                            this.$.setChild(new Node($$[$0-1], 'DECR'));
                            this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
                            this.$.traduction = '\n' + $$[$0-2] + $$[$0-1] + $$[$0];
                     
break;
case 90:

                            this.$ = new Node('INCR_DECR','');
                            this.$.setChild(new Node($$[$0-2], 'ID'));
                            this.$.setChild(new Node($$[$0-1], 'INCR'));
                            this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
                            this.$.traduction = '\n' + $$[$0-2] + $$[$0-1] + $$[$0];
                     
break;
case 91:
 
    this.$ = new Node('SENTENCIA_RETURN_METODOS','');
    this.$.setChild(new Node($$[$0-1], 'RETURN'));
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction = '\n' + $$[$0-1] + $$[$0] + '\n';

break;
case 92:
 
    this.$ = new Node('SENTENCIA_RETURN_FUNCIONES','');
    this.$.setChild(new Node($$[$0-2], 'RETURN'));
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction = '\n' + $$[$0-2] + ' '+ $$[$0-1].traduction +  $$[$0] + '\n';

break;
case 93:

        this.$ = new Node('SENTENCIA_RETURN_FUNCIONES','');
        this.$.setChild(new Node($$[$0-3], 'RETURN'));
        this.$.setChild(new Node($$[$0-2], 'ID'));
        this.$.setChild(new Node($$[$0-1], 'DECR'));
        this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
        this.$.traduction = '\n' + $$[$0-3] + ' '+ $$[$0-2] +  $$[$0-1] + $$[$0] + '\n';
    
break;
case 94:

        this.$ = new Node('SENTENCIA_RETURN_FUNCIONES','');
        this.$.setChild(new Node($$[$0-3], 'RETURN'));
        this.$.setChild(new Node($$[$0-2], 'ID'));
        this.$.setChild(new Node($$[$0-1], 'INCR'));
        this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
        this.$.traduction = '\n' + $$[$0-3] + ' '+ $$[$0-2] +  $$[$0-1] + $$[$0] + '\n';
    
break;
case 95:
 
    this.$ = new Node('SENTENCIA_BREAK','');
    this.$.setChild(new Node($$[$0-1], 'BREAK'));
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction = '\n' + $$[$0-1] + $$[$0] + '\n';

break;
case 96:
 
    this.$ = new Node('SENTENCIA_CONTINUE','');
    this.$.setChild(new Node($$[$0-1], 'CONTINUE'));
    this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
    this.$.traduction = '\n' + $$[$0-1] + $$[$0] + '\n';

break;
case 97:
 
    this.$ = new Node('ASIGNACION_SIMPLE','');
    this.$.setChild(new Node($$[$0-3], 'ID'));
    this.$.setChild(new Node($$[$0-2], 'ASIGNACION'));
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'COMA'));
    this.$.traduction = $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1].traduction + $$[$0] + '\n';

break;
case 98:
 
    this.$ = new Node('CONDICION','');  
    this.$.setChild(new Node($$[$0-2], 'PARENTIZQ'));  
    this.$.setChild($$[$0-1]);
    this.$.setChild(new Node($$[$0], 'PARENTDER'));
    this.$.traduction = $$[$0-2] + $$[$0-1].traduction + $$[$0];

break;
case 99:
 
        this.$ = new Node('EXPRESION',''); 
        this.$.setChild(new Node($$[$0-1], 'MENOS'));
        this.$.setChild($$[$0]);
        this.$.traduction = '-' + $$[$0].traduction;
    
break;
case 100:
 
                this.$ = new Node('EXPRESION',''); 
                this.$.setChild(new Node($$[$0-1], 'NEGACION'));
                this.$.setChild($$[$0]);
                this.$.traduction = '!' + $$[$0].traduction;
          
break;
case 101:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MAS'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' + ' + $$[$0].traduction;
          
break;
case 102:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MENOS'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' - ' + $$[$0].traduction;

          
break;
case 103:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MULT'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' * ' + $$[$0].traduction;
          
break;
case 104:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'DIVISION'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' / ' + $$[$0].traduction;
          
break;
case 105:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MAYOR_IGUAL'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' >= ' + $$[$0].traduction;
          
break;
case 106:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MENOR_IGUAL'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' <= ' + $$[$0].traduction;
          
break;
case 107:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MAYOR'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' > ' + $$[$0].traduction;
          
break;
case 108:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'MENOR'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' < ' + $$[$0].traduction;
          
break;
case 109:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'IGUALDAD'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' == ' + $$[$0].traduction;
          
break;
case 110:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'NO_IGUAL'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' != ' + $$[$0].traduction;
          
break;
case 111:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'AND'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' && ' + $$[$0].traduction;
          
break;
case 112:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'OR'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' || ' + $$[$0].traduction;
          
break;
case 113:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild($$[$0-2]);
              this.$.setChild(new Node($$[$0-1], 'XOR'));
              this.$.setChild($$[$0]);
              this.$.traduction = $$[$0-2].traduction + ' ^ ' + $$[$0].traduction;
          
break;
case 114:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'ENTERO'));
              this.$.traduction = $$[$0]
          
break;
case 115:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'DECIMAL'));
              this.$.traduction = $$[$0]
          
break;
case 116:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'TRUE'));
              this.$.traduction = $$[$0]
          
break;
case 117:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'FALSE'));
              this.$.traduction = $$[$0]
          
break;
case 118:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'STRING'));
              this.$.traduction = ''+ $$[$0] +'';
          
break;
case 119:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0-2], 'PARENTIZQ'));
              this.$.setChild($$[$0-1]);
              this.$.setChild(new Node($$[$0], 'PARENTDER'));
              this.$.traduction = $$[$0-2] + $$[$0-1].traduction + $$[$0];
          
break;
case 120:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0-2], 'ID'));
              this.$.setChild(new Node($$[$0-1], 'DECR'));
              this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
              this.$.traduction = $$[$0-2] + $$[$0-1] + $$[$0];
          
break;
case 121:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0-2], 'ID'));
              this.$.setChild(new Node($$[$0-1], 'INCR'));
              this.$.setChild(new Node($$[$0], 'PUNTO_COMA'));
              this.$.traduction = $$[$0-2] + $$[$0-1] + $$[$0];
          
break;
case 122:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'ID'));
              this.$.traduction = $$[$0]
          
break;
case 123:
 
              this.$ = new Node('EXPRESION','');
              this.$.setChild(new Node($$[$0], 'NULL'));
              this.$.traduction = $$[$0]
        
          
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:5,8:6,9:7,10:$V2,55:$V3,56:$V4},{1:[3]},{2:[1,16],5:[1,12],7:13,8:14,9:15,10:$V2,55:$V3,56:$V4},{2:$V0,3:17,4:2,5:$V1,6:3,7:5,8:18,9:7,10:$V2,55:$V3,56:$V4},{1:[2,3]},o($V5,[2,6]),o($V5,[2,7]),o($V5,[2,8]),o($V5,[2,9]),{11:[1,19],31:[1,20]},o($V6,[2,55]),o($V6,[2,56]),{1:[2,1]},o($V5,[2,4]),o($V5,[2,5]),o($V5,[2,11]),o($V5,[2,12]),{1:[2,2]},o($V5,[2,25]),{12:[1,21]},{12:[1,22]},{2:[1,26],9:25,13:23,14:[1,24],55:$V3,56:$V4},{14:[1,28],32:27},o($V5,[2,10]),{2:[1,32],10:$V7,15:29,16:[1,30],17:31},o($V5,[2,15]),o($V5,[2,16]),o($V5,[2,27]),{10:$V8,16:[1,35],33:34,34:36},{2:[1,40],10:$V7,16:[1,38],17:39},o($V5,[2,14]),o($V9,[2,18]),o($V9,[2,19]),{18:41,21:[1,42],22:$Va,24:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf},{10:$V8,16:[1,49],34:50},o($V5,[2,29]),o($Vg,[2,31]),{18:51,22:$Va,24:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf},o($V5,[2,13]),o($V9,[2,17]),o($V9,[2,22]),{12:[1,52]},{22:[1,53]},{12:[2,64]},{12:[2,65]},{12:[2,66]},{12:[2,67]},{12:[2,68]},{12:[2,69]},o($V5,[2,28]),o($Vg,[2,30]),{12:[1,54]},{19:[1,55]},{23:[1,56]},{19:[1,57]},{18:61,20:58,22:$Va,24:$Vb,28:[1,60],30:59,58:$Vc,59:$Vd,60:$Ve,61:$Vf},{19:[1,62]},{18:61,22:$Va,24:$Vb,28:[1,65],30:64,35:63,58:$Vc,59:$Vd,60:$Ve,61:$Vf},o($V9,[2,20]),{28:[1,66],37:$Vh},{9:70,14:$Vi,29:68,55:$V3,56:$V4},{12:[1,71]},{24:[1,72]},o($Vg,[2,32]),{28:[1,73],37:$Vh},{36:[1,74]},{9:70,14:$Vi,29:75,55:$V3,56:$V4},{18:76,22:$Va,24:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf},o($V9,[2,24]),{2:[1,81],9:79,12:$Vj,16:[1,78],18:104,22:$Va,24:$Vb,38:80,39:82,40:83,41:84,42:85,43:86,44:87,45:88,46:89,47:90,48:91,49:92,50:93,51:94,55:$V3,56:$V4,57:77,58:$Vc,59:$Vd,60:$Ve,61:$Vf,65:$Vk,71:$Vl,74:$Vm,75:$Vn,76:$Vo,80:$Vp,81:$Vq,82:$Vr},o($Vs,[2,62]),o($Vt,[2,36]),{25:[1,105]},{36:[1,106]},o($Vg,[2,34]),o($V9,[2,23]),{12:[1,107]},{9:110,12:$Vj,16:[1,108],18:104,22:$Va,24:$Vb,38:109,39:82,40:83,41:84,42:85,43:86,44:87,45:88,46:89,47:90,48:91,49:92,50:93,51:94,55:$V3,56:$V4,58:$Vc,59:$Vd,60:$Ve,61:$Vf,65:$Vk,71:$Vl,74:$Vm,75:$Vn,76:$Vo,80:$Vp,81:$Vq,82:$Vr},o($Vs,[2,63]),o($Vu,[2,58]),o($Vu,[2,59]),o($Vu,[2,60]),o($Vu,[2,37]),o($Vu,[2,38]),o($Vu,[2,39]),o($Vu,[2,40]),o($Vu,[2,41]),o($Vu,[2,42]),o($Vu,[2,43]),o($Vu,[2,44]),o($Vu,[2,45]),o($Vu,[2,46]),o($Vu,[2,47]),o($Vu,[2,48]),o($Vu,[2,49]),{19:[1,114],64:[1,111],78:$Vv,79:$Vw},{36:[1,115]},{36:[1,116]},{12:[1,119],19:$Vx,36:[1,117],53:118,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{19:[1,129]},{19:$VG,72:130},{9:70,14:$Vi,29:132,55:$V3,56:$V4},{19:$VG,72:133},{66:[1,134]},{12:[1,136],62:135},{26:[1,137]},o($Vg,[2,33]),o($Vt,[2,35]),o($Vs,[2,61]),o($Vu,[2,57]),o($Vu,[2,50]),{12:$VH,19:$Vx,53:138,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},o($VI,[2,87],{36:[1,140]}),o($VI,[2,88],{36:[1,141]}),{12:$VH,19:$Vx,28:[1,142],52:143,53:144,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},o($Vu,[2,95]),o($Vu,[2,96]),o($Vu,[2,91]),{36:[1,145],83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV},o([36,83,85,86,87,88,89,90,91,92,93,94,95,96],$VW,{78:[1,160],79:[1,159]}),{12:$VH,19:$Vx,53:161,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{12:$VH,19:$Vx,53:162,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},o($VX,[2,114]),o($VX,[2,115]),o($VX,[2,116]),o($VX,[2,117]),o($VX,[2,118]),{12:$VH,19:$Vx,53:163,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},o($VX,[2,123]),{12:[1,166],18:165,22:$Va,24:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,77:164},{9:70,14:$Vi,29:167,55:$V3,56:$V4},{12:$VH,19:$Vx,53:168,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{74:[1,169]},{9:70,14:$Vi,29:170,55:$V3,56:$V4},{67:[1,171]},{36:[1,175],37:[1,173],63:172,64:[1,174]},o($VY,[2,72]),{27:[1,176]},{36:[1,177],83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV},o($VX,$VW,{78:[1,179],79:[1,178]}),o($VI,[2,90]),o($VI,[2,89]),{36:[1,180]},{28:[1,181]},{28:[2,54],54:[1,182],83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV},o($Vu,[2,92]),{12:$VH,19:$Vx,53:183,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{12:$VH,19:$Vx,53:184,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{12:$VH,19:$Vx,53:185,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{12:$VH,19:$Vx,53:186,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{12:$VH,19:$Vx,53:187,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{12:$VH,19:$Vx,53:188,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{12:$VH,19:$Vx,53:189,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{12:$VH,19:$Vx,53:190,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{12:$VH,19:$Vx,53:191,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{12:$VH,19:$Vx,53:192,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{12:$VH,19:$Vx,53:193,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{12:$VH,19:$Vx,53:194,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{12:$VH,19:$Vx,53:195,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{36:[1,196]},{36:[1,197]},o($VZ,[2,99],{96:$VV}),o($VZ,[2,100],{96:$VV}),{28:[1,198],83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV},{36:[1,199]},{12:[1,200]},{64:[1,201]},o($Vu,[2,82]),{28:[1,202],83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV},{19:$VG,72:203},o($Vu,[2,79],{73:[1,204]}),{66:[1,205]},o($Vu,[2,70]),{12:[1,206]},{12:$VH,19:$Vx,53:207,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},o($Vu,[2,74]),{28:[1,208]},o($Vu,[2,97]),{36:[1,209]},{36:[1,210]},o($Vu,[2,51]),{36:[1,211]},{12:$VH,19:$Vx,52:212,53:144,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},o($V_,[2,101],{86:$VL,87:$VM,96:$VV}),o($V_,[2,102],{86:$VL,87:$VM,96:$VV}),o($VZ,[2,103],{96:$VV}),o($VZ,[2,104],{96:$VV}),o($V$,[2,105],{83:$VJ,85:$VK,86:$VL,87:$VM,96:$VV}),o($V$,[2,106],{83:$VJ,85:$VK,86:$VL,87:$VM,96:$VV}),o($V$,[2,107],{83:$VJ,85:$VK,86:$VL,87:$VM,96:$VV}),o($V$,[2,108],{83:$VJ,85:$VK,86:$VL,87:$VM,96:$VV}),o($V01,[2,109],{83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,96:$VV}),o($V01,[2,110],{83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,96:$VV}),o([28,36,54,94,95],[2,111],{83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,96:$VV}),o([28,36,54,95],[2,112],{83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,96:$VV}),o([28,36,54],[2,113],{83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV}),o($Vu,[2,93],{36:$V11,83:$V11,85:$V11,86:$V11,87:$V11,88:$V11,89:$V11,90:$V11,91:$V11,92:$V11,93:$V11,94:$V11,95:$V11,96:$V11}),o($Vu,[2,94],{36:$V21,83:$V21,85:$V21,86:$V21,87:$V21,88:$V21,89:$V21,90:$V21,91:$V21,92:$V21,93:$V21,94:$V21,95:$V21,96:$V21}),o($VX,[2,119]),{12:$VH,19:$Vx,53:213,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{64:[1,214]},{12:$VH,19:$Vx,53:215,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},o([14,36,55,56],[2,98]),{36:[1,216]},{9:70,14:$Vi,29:218,46:217,55:$V3,56:$V4,71:$Vl},{2:[1,222],68:219,69:[1,220],70:[1,221]},o($VY,[2,71]),{36:[1,223],83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV},{9:70,14:$Vi,29:224,55:$V3,56:$V4},o($VX,$V11),o($VX,$V21),o($Vu,[2,52]),{28:[2,53]},{36:[1,225],83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV},{12:$VH,19:$Vx,53:226,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{36:[2,86],83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV},o($Vu,[2,83]),o($Vu,[2,80]),o($Vu,[2,81]),{19:[1,227]},{19:[2,76]},{19:[2,77]},{19:[2,78]},o($Vu,[2,73]),o($V9,[2,21]),{12:[1,229],50:228},{36:[2,85],83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV},{12:$VH,19:$Vx,53:230,83:$Vy,84:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{28:[1,231]},{78:$Vv,79:$Vw},{28:[1,232],83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV},{9:70,14:$Vi,29:233,55:$V3,56:$V4},{36:[1,234]},o($Vu,[2,84]),o($Vu,[2,75])],
defaultActions: {4:[2,3],12:[2,1],17:[2,2],43:[2,64],44:[2,65],45:[2,66],46:[2,67],47:[2,68],48:[2,69],212:[2,53],220:[2,76],221:[2,77],222:[2,78]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Token = require('./Token');
    var tokenList = [];


    const Node = require('./AST/node');
    const Error = require('./AST/error');
    const ScanError = require('./Error/scanError');
    var errorList = [];
    var serrorList = [];
    var nodeList = [];
    this.traduction = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:  var newToken = new Token("COMENTARIO_UNILINEA",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 55;
break;
case 4:  var newToken = new Token("COMENTARIO_MULTILINEA",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 56;
break;
case 5:  var newToken = new Token("STRING",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 101;
break;
case 6:  var newToken = new Token("PUNTO_COMA",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 36;
break;
case 7:  var newToken = new Token("DOS_PUNTOS",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 'DOS_PUNTOS';
break;
case 8:  var newToken = new Token("COMA",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 37;
break;
case 9: var newToken = new Token("INCR",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 78;
break;
case 10:  var newToken = new Token("MAS",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 85;
break;
case 11:  var newToken = new Token("DECR",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 79;
break;
case 12:  var newToken = new Token("MENOS",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 83;
break;
case 13:  var newToken = new Token("DIVISION",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 87;
break;
case 14:  var newToken = new Token("MULT",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 86;
break;
case 15:  var newToken = new Token("PUNTO",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 66;
break;
case 16:  var newToken = new Token("MENOR",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 91;
break;
case 17:  var newToken = new Token("MAYOR",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 90;
break;
case 18:  var newToken = new Token("MENOR_IGUAL",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 89;
break;
case 19:  var newToken = new Token("MAYOR_IGUAL",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 88;
break;
case 20:  var newToken = new Token("IGUALDAD",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 92;
break;
case 21:  var newToken = new Token("DESIGUALDAD",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 93;
break;
case 22:  var newToken = new Token("OR",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 95;
break;
case 23:  var newToken = new Token("AND",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 94;
break;
case 24:  var newToken = new Token("XOR",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 96;
break;
case 25:  var newToken = new Token("NEG",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 84;
break;
case 26:  var newToken = new Token("ASIGNACION",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 64;
break;
case 27:  var newToken = new Token("PARENTIZQ",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 19;
break;
case 28:  var newToken = new Token("PARENTDER",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 28;
break;
case 29:  var newToken = new Token("BRACKIZQ",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 25;
break;
case 30:  var newToken = new Token("BRACKDER",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 26;
break;
case 31:  var newToken = new Token("LLAVEIZQ",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 14;
break;
case 32:  var newToken = new Token("LLAVEDER",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 16;
break;
case 33:  var newToken = new Token("RESERVADA_PUBLIC",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 10;
break;
case 34:  var newToken = new Token("RESERVADA_CLASS",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 11;
break;
case 35:  var newToken = new Token("RESERVADA_INTERFACE",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 31;
break;
case 36:  var newToken = new Token("RESERVADA_INT",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 59; return 61;
break;
case 37:  var newToken = new Token("RESERVADA_DOUBLE",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 58;
break;
case 38:  var newToken = new Token("RESERVADA_BOOLEAN",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);
break;
case 39: var newToken = new Token("RESERVADA_VOID",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 22;
break;
case 40:  var newToken = new Token("RESERVADA_CHAR",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 60;
break;
case 41:  var newToken = new Token("RESERVADA_NULL",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 102;
break;
case 42: var newToken = new Token("RESERVADA_STRING",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 24;
break;
case 43:  var newToken = new Token("RESERVADA_IF",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 71;
break;
case 44:  var newToken = new Token("RESERVADA_ELSE",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 73;
break;
case 45:  var newToken = new Token("RESERVADA_FOR",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 76;
break;
case 46:  var newToken = new Token("RESERVADA_WHILE",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 74;
break;
case 47:  var newToken = new Token("RESERVADA_DO",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 75;
break;
case 48:  var newToken = new Token("RESERVADA_TRUE",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 99;
break;
case 49:  var newToken = new Token("RESERVADA_FALSE",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 100;
break;
case 50:  var newToken = new Token("RESERVADA_STATIC",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 21;
break;
case 51:  var newToken = new Token("RESERVADA_MAIN",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 23;
break;
case 52: var newToken = new Token("RESERVADA_CONTINUE",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 82; 
break;
case 53: var newToken = new Token("RESERVADA_BREAK",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 81;
break;
case 54: var newToken = new Token("RESERVADA_SYSTEM",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 65;
break;
case 55:  var newToken = new Token("RESERVADA_OUT",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 67;
break;
case 56:  var newToken = new Token("RESERVADA_PRINTLN",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 69;
break;
case 57:  var newToken = new Token("RESERVADA_PRINT",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 70;
break;
case 58:  var newToken = new Token("RESERVADA_RETURN",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 80;
break;
case 59:  var newToken = new Token("RESERVADA_ARGS",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 27;
break;
case 60:  var newToken = new Token("DECIMAL",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 98;
break;
case 61:  var newToken = new Token("ENTERO",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken); return 97;
break;
case 62:  var newToken = new Token("ID",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 12;
break;
case 63:  var newToken = new Token("CHAR",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 'CHAR';
break;
case 64:  var newToken = new Token("EOF",yy_.yytext.substr(0,yy_.yyleng), yy_.yylloc.first_line, yy_.yylloc.first_column); tokenList.push(newToken);return 5;
break;
case 65: console.error('Este es un error léxico: ' + yy_.yytext + '  en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:"[^\"]*")/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:char\b)/i,/^(?:null\b)/i,/^(?:String\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:return\b)/i,/^(?:args\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:'.')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}